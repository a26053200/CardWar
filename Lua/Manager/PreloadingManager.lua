---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2019/12/17 14:43
--- 预加载
---

local LuaMonoBehaviour = require('Core.LuaMonoBehaviour')
---@class Game.Manager.PreloadingManager : Core.LuaMonoBehaviour
---@field cacheUnity table<string, UnityEngine.SceneManagement.Scene> --预加载的场景缓存
---@field taskList List | table<string, PreloadingTask>
local PreloadingManager = class("Game.Manager.PreloadingManager",LuaMonoBehaviour)

local Min_Progress_Time = 0.1
local Max_Progress_Time = 0.3

function PreloadingManager:Ctor()
    PreloadingManager.super.Ctor(self)
    self.cacheUnity = {}
    self.taskList = List.New()
end

--添加预加载任务
---@param task PreloadingTask
function PreloadingManager:AddTask(task)
    self.taskList:Push(task)
end

--开始执行预加载任务
---@param progressCallback fun() | Handler
---@param overCallback fun() | Handler
function PreloadingManager:Execute(progressCallback, overCallback)
    self:StartCoroutine(function()
        local taskSize = self.taskList:Size()
        if taskSize > 0 then
            local subLength = 1 / taskSize
            local currLoaded = 0
            for i = 1, taskSize do
                local task = self.taskList[i] ---@type PreloadingTask
                if task.waitTime and task.waitTime > 0 then
                    self:WaitProgress(task.waitTime, progressCallback, currLoaded, subLength)
                end
                print("PreloadingManager:" .. task.type)
                if task.type == PreloadingTaskType.GC then --进入场景
                    --TODO GC 内存回收
                    self:OnLoadingOver(task.doneCallback)
                elseif task.type == PreloadingTaskType.EnterScene then --进入场景
                    local enter = false
                    World.EnterScene(task.sceneInfo,function()
                        self:OnLoadingOver(task.doneCallback)
                        enter = true
                    end)
                    while not enter do
                        coroutine.step(1)
                    end
                elseif task.type == PreloadingTaskType.Callback then --直接回调
                    coroutine.step(1)
                    self:OnLoadingOver(task.doneCallback)
                else --其他类型任务
                    if task.type == PreloadingTaskType.LoadScene then --加载场景
                        Res.LoadObjectAsync(task.sceneInfo.levelUrl,function(sceneName)
                            --log("pre load success!  " .. task.sceneInfo.levelUrl)
                            self:OnLoadingOver(task.doneCallback)
                        end)
                    elseif task.type == PreloadingTaskType.InstanceScene then --实例化场景
                        local level = string.lower(task.sceneInfo.level)
                        sceneMgr:LoadSubSceneAsync(level, function (unityScene)
                            self.cacheUnity[task.sceneInfo.level] = unityScene
                            if task.sceneInfo.isSubScene then --加载后关闭相机和灯光
                                Tool.GetCamera(unityScene).gameObject:SetActive(false)
                                Tool.GetLightObj(unityScene):SetActive(false)
                            end
                            --log("pre instance success!  " .. level)
                        end)
                    end
                    local async = self:GetAsyncOperation(task)
                    while async == nil or not async.isDone do
                        if async == nil then
                            async = self:GetAsyncOperation(task)
                        else
                            self:OnLoadingProgress(progressCallback, currLoaded + async.progress * subLength )
                        end
                        coroutine.step(1)
                    end
                end
                currLoaded = currLoaded + subLength
                self:OnLoadingProgress(progressCallback, currLoaded)
            end
            self:OnLoadingOver(overCallback)
            self.taskList:Clear()
        else --没有预载
            self:OnLoadingProgress(progressCallback, 1)
            self:OnLoadingOver(overCallback)
        end
    end)
end

function PreloadingManager:WaitProgress(waitTime, progressCallback, currLoaded, subLength)
    local startTime = Time.time
    while Time.time - startTime < waitTime do
        coroutine.step(1)
        self:OnLoadingProgress(progressCallback, currLoaded + ((Time.time - startTime) / waitTime) * subLength )
    end
end

---@param task PreloadingTask
---@return UnityEngine.AsyncOperation
function PreloadingManager:GetAsyncOperation(task)
    local async
    if task.type == PreloadingTaskType.LoadScene then
        async = assetsMgr:GetBundleRequest(task.sceneInfo.levelUrl)
    elseif task.type == PreloadingTaskType.InstanceScene then
        async = sceneMgr:GetAsyncOperation(string.lower(task.sceneInfo.level))
    end
    return async
end

function PreloadingManager:OnLoadingProgress(progressCallback, progress)
    if progressCallback then
        if isFunction(progressCallback) then
            progressCallback(progress)
        else
            progressCallback:Execute(progress)
        end
    end
end

function PreloadingManager:OnLoadingOver(overCallback)
    if overCallback then
        if isFunction(overCallback) then
            overCallback()
        else
            overCallback:Execute()
        end
    end
end

return PreloadingManager