---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2020/4/10 23:37
---

local FloatNumber = require("Game.Modules.Battle.Components.FloatNumber")
local BattleUnit = require("Game.Modules.World.Items.BattleUnit")

---@class WorldContext
---@field New fun(mode : BattleMode, speed : number)
---@field mode BattleMode
---@field id number
---@field checkPointData CheckPointData
---@field battleSceneInfo BattleSceneInfo --战斗场景信息
---@field currSubScene Game.Modules.World.Scenes.Core.SubScene | Game.Modules.World.Scenes.BattleScene  当前子场景
---@field battleBehavior Game.Modules.Battle.Behaviors.BattleBehavior | Game.Modules.Battle.Behaviors.PveBattleBehavior    战场行为
---@field avatarRoot UnityEngine.GameObject
---@field luaReflect Framework.LuaReflect
---@field pool Game.Modules.Common.Pools.AssetPoolProxy 对象池
---@field attachCamera Game.Modules.Common.Components.AttachCamera
---@field battleLayout Game.Modules.Battle.View.BattleLayout
---@field battleSpeed number 战斗速度
local WorldContext = class("WorldContext")

local Sid = 1

---@param mode BattleMode
function WorldContext:Ctor(mode, speed)
    self.id = Sid
    Sid = Sid + 1
    self.mode = mode
    self.battleSpeed = speed
    self.dropList = List.New()
end

function WorldContext:CreateAvatarRoot()
    self.avatarRoot = self.currSubScene:CreateGameObject("AvatarRoot" .. self.id)
    self.luaReflect = self.avatarRoot:AddComponent(typeof(Framework.LuaReflect))
    self.luaReflect:PushLuaFunction("AddBattleUnit",handler(self, self.AddBattleUnit))
    self.luaReflect:PushLuaFunction("RemoveBattleUnit",handler(self, self.RemoveBattleUnit))
end

---@param camp Camp
---@param battleUnitName string
---@return Game.Modules.World.Items.BattleUnit
function WorldContext:AddBattleUnit(camp, battleUnitName, layoutIndex)
    local battleUnit = self:CreateBattleUnit(camp,battleUnitName, layoutIndex)
    self.battleLayout:AddUnit(battleUnit, camp, layoutIndex)
    return battleUnit
end

function WorldContext:RemoveBattleUnit(camp, index)
    local grid = self.battleLayout:GetLayoutGridByIndex(camp, index)
    if grid then
        if grid.owner then
            grid.owner:Dispose()
        end
        grid:ClearOwner()
    else
        logError("There is no empty grid")
    end
end

---@param camp Camp 卡牌
---@param battleUnitName string 单位名字
---@param layoutIndex number
function WorldContext:CreateBattleUnit(camp, battleUnitName, layoutIndex)
    local battleUnitVo = World.CreateBattleUnitVo(battleUnitName)
    battleUnitVo.camp = camp
    battleUnitVo.layoutIndex = layoutIndex
    local battleItem = BattleUnit.New(battleUnitVo, self)
    return battleItem
end

function WorldContext:SetBattleSpeed(speed)
    self.battleSpeed = speed
end

---@return Game.Modules.World.Items.BattleUnit
function WorldContext:GetBattleUnit(camp, layoutIndex)
    return self.battleLayout:GetLayoutGridByIndex(camp, layoutIndex).owner
end

--获取某阵营所有单位
---@param camp Camp
---@param includeDead boolean 是否包含死亡单位
---@return List | table<number, Game.Modules.Battle.Report.ReportBattleUnit>
function WorldContext:GetCampUnitList(camp, includeDead)
    local gridList = self.battleLayout.gridLayoutMap[camp] ---@type table<number, Game.Modules.Battle.Report.ReportBattleUnit>
    local tempList = List.New()
    for i = 1, #gridList do
        if gridList[i].owner then
            local checkDead = includeDead and true or (not gridList[i].owner:IsDead())
            if checkDead and gridList[i].owner.battleUnitVo.layoutIndex ~= 0 then
                tempList:Add(gridList[i].owner)
            end
        end
    end
    return tempList
end

--某阵营是否都以阵亡
---@param camp Camp
function WorldContext:IsCampAllDead(camp)
    local gridList = self.battleLayout.gridLayoutMap[camp]
    local allDead = true
    for i = 1, #gridList do
        if gridList[i].owner and not gridList[i].owner:IsDead() then
            allDead = false
            break;
        end
    end
    return allDead
end

--某阵营是否都以死亡结束
---@param camp Camp
function WorldContext:IsCampAllDeadOver(camp)
    local gridList = self.battleLayout.gridLayoutMap[camp]
    local allDead = true
    for i = 1, #gridList do
        if gridList[i].owner and not gridList[i].owner.deadOver then
            allDead = false
            break;
        end
    end
    return allDead
end

--遍历
---@param camp Camp
---@param doFun fun(b:Game.Modules.World.Items.BattleUnit) | Handler
function WorldContext:ForEach(camp, doFun)
    local gridList = self.battleLayout.gridLayoutMap[camp]
    for i = 1, #gridList do
        if gridList[i].owner then
            invoke(doFun, gridList[i].owner)
        end
    end
end

function WorldContext:Dispose()
    if self.battleBehavior then
        self.battleBehavior:Dispose()
        self.battleBehavior = nil
    end
    if self.attachCamera then
        self.attachCamera:Dispose()
        self.attachCamera = nil
    end
    if self.pool then
        self.pool:Dispose()
        self.pool = nil
    end
    if self.battleLayout then
        self.battleLayout:Dispose()
        self.battleLayout = nil
    end
    Destroy(self.avatarRoot)
    self.avatarRoot = nil
    FloatNumber.Clear()
end

return WorldContext