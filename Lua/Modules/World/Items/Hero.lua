---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2019/5/6 10:53
---

local BattleEvents = require("Module.World.Events.BattleEvents")
local HeroBehavior = require("Module.World.Behaviors.HeroBehavior")
local AvatarGridBehavior = require("Game.Modules.Battle.Behaviors.AvatarGridBehavior")
local HeroStrategy = require("Module.World.Behaviors.Strategy.HeroStrategy")
local GridHeroStrategy = require("Module.Battle.Behaviors.Strategy.GridHeroStrategy")
local Avatar = require("Game.Modules.World.Items.Avatar")

---@class Game.Modules.World.Items.Hero : Game.Modules.World.Items.Avatar
---@field New fun(heroInfo:Game.Modules.World.Vo.HeroVo, context:WorldContext):Game.Modules.World.Items.Hero
---@field heroInfo Game.Modules.World.Vo.HeroVo
---@field debugPoints AStar.DebugPoints
---@field behavior Module.World.Behaviors.HeroBehavior
---@field leader Game.Modules.World.Items.Hero 领导
local Hero = class("Module.World.Items.Hero", Avatar)

---@param heroInfo Game.Modules.World.Vo.HeroVo
---@param context WorldContext
function Hero:Ctor(heroInfo, context)
    self:SetContext(context)
    self.heroInfo = heroInfo
    Hero.super.Ctor(self, heroInfo)
end

function Hero:LoadObject()
    if self.avatarInfo.prefabUrl then
        self.renderObj = self.context.pool:CreateObjectByPool(self.avatarInfo.prefabUrl)
        self.renderObj.transform:SetParent(self.transform)
        self.renderObj:ResetTransform()
        self:OnRenderObjInit()
    end
end

function Hero:OnRenderObjInit()
    Hero.super.OnRenderObjInit(self)
    --self.debugPoints = self.gameObject:AddComponent(typeof(AStar.DebugPoints))

    if self.context.mode == BattleMode.Idle then
        self.behavior = HeroBehavior.New(self)
        self.strategy = HeroStrategy.New(self)
        self:SetLayer(Layers.Name.Hero)
    elseif self.context.mode == BattleMode.Grid then
        self.behavior = AvatarGridBehavior.New(self)
        self.strategy = GridHeroStrategy.New(self)
        self:SetLayer(Layers.Name.Hero)
        --self:CreateGrid()
    elseif self.context.mode == BattleMode.Camp then
        self.behavior = HeroBehavior.New(self)
        self.strategy = HeroStrategy.New(self)
        self:SetLayer(Layers.Name.Hero)
    else
        self:SetLayer(Layers.Name.Hero)
    end
    self:SetRenderEnabled(false)
    self:CheckUseWeapon()
end

function Hero:SetMode(mode)
    if self.behavior then
        self.behavior:Stop()
        self.behavior:Dispose()
    end
    if mode == BattleMode.Idle then
        self.behavior = HeroBehavior.New(self)
        self.strategy = HeroStrategy.New(self)
    elseif mode == BattleMode.Camp then
        self.behavior = HeroBehavior.New(self)
        self.strategy = HeroStrategy.New(self)
    else
        self.behavior = AvatarGridBehavior.New(self)
        self.strategy = GridHeroStrategy.New(self)
    end
end

function Hero:PlayRun()
    self.animCtrl:PlayAnim(self.avatarInfo.animRun, nil, 1.5)
end

--传送效果
---@param destPos UnityEngine.Vector3
function Hero:Transfer(destPos, middleCallback, callback)
    local transferEffectInfo = EffectConfig.Clone(self.avatarInfo.bornEffect)
    self:PlayIdle()
    self.effectWidget:Play(self.avatarInfo.bornEffect, self)
    self.effectWidget:CreateDelay(transferEffectInfo.duration * 0.3,function()
        self:PlayIdle()
        self:SetRenderEnabled(true)
        self.isBorn = true
        self.gameObject.transform.position = destPos
        if middleCallback then
            middleCallback()
        end
    end)
    self.effectWidget:CreateDelay(transferEffectInfo.duration,function()
        if callback then
            callback()
        end
    end)
end

--over write
--重置属性
function Hero:ResetAttr()
    self.isBorn = true
    self.isMoving = false
    --self.heroInfo.expCur = 0
    --self.heroInfo.level = self.heroInfo.level
    --local maxHp = math.random(self.heroInfo.hp_min, self.heroInfo.hp_max)
    self.heroInfo.maxHp = self.avatarInfo.hp_max
    self.heroInfo.curHp = self.heroInfo.maxHp
    self:ChangeHp()
    --for i = 1, #self.heroInfo.skills do
    --    local skill = self.heroInfo.skills[i]
    --    skill.animSpeed = skill.animSpeed or 1
    --end
end

function Hero:UpdateNode()
    Hero.super.UpdateNode(self)
    if self.heroInfo.isLeader and self.context.grid then
        self.behindPoints = AStarUtils.GetBehindPoints(self.context.grid, self.gameObject)
    end
end

--英魂跟随
function Hero:NotifyFollow()
    local dstPos = self.leader.behindPoints[self.heroInfo.index]
    Math3D.LookAt2DPos(self.transform, dstPos)
    local delta = FRAME_TIME * self.avatarInfo.moveSpeed
    self.transform.position = Vector3.Lerp(self.transform.position, dstPos, delta)
    self:UpdateNode()
end

function Hero:HeroLevelUp()
    if not self.levelUpEffect1 then
        local prefab = Res.LoadAsset("Effect/Prefabs/fx_upgrade_02.prefab")
        self.levelUpEffect1 = GameObject.Instantiate(prefab)
        self.levelUpEffect1.transform.parent = self.gameObject.transform
        self.levelUpEffect1:ResetTransform()
        self.levelUpEffect1.transform.localPosition = Vector3.New(0, 0, 0)
        self.levelUpEffect1.transform.localScale = Vector3.New(0.3, 0.3, 0.3)
    end
    self.levelUpEffect1:GetComponent("ParticleSystem"):Play()
    if not self.levelUpEffect2 then
        local prefab = Res.LoadAsset("Effect/Prefabs/fx_text.prefab")
        self.levelUpEffect2 = GameObject.Instantiate(prefab)
        self.levelUpEffect2.transform.parent = self.gameObject.transform
        self.levelUpEffect2:ResetTransform()
        self.levelUpEffect2.transform.localPosition = Vector3.New(0, 2, 0)
        self.levelUpEffect2.transform.localScale = Vector3.New(0.3, 0.3, 0.3)
    end
    self.levelUpEffect2:GetComponent("ParticleSystem"):Play()
end

function Hero:SetBehaviorEnabled(enabled)
    if self.behavior then
        if enabled then
            if not self.behavior:isRuning() then
                self.behavior:Play()
            end
        else
            self.behavior:Stop()
        end
        --self:_debug("Hero:SetBehaviorEnabled " .. tostring(enabled))
    end
end

---@param collection Module.World.Items.Collection
function Hero:DigBegin(collection)
    Math3D.LookAt2D(self.transform, collection.transform)-- 采集时看向目标
    self.hero:HideOriginalModelWeapon(true)
    local animNames = string.split(self.heroInfo.skillDig.skillInfo.animName,",")
    self.animCtrl:PlayAnimSpeed(animNames[1], self.hero.avatarVo.skillDig.animSpeed)-- 采集开始动作
end

function Hero:DigProgress()

end

function Hero:DigEnd()

end

function Hero:PlayDead()
    self:SetBehaviorEnabled(false)
    self.animCtrl:PlayAnim(self.avatarInfo.animDead,Handler.Get(self.OnDeadAnimOver,self))
end

function Hero:OnDeadAnimOver()
    local event = {}
    event.type = BattleEvents.HeroDead
    event.hero = self
    BattleEvents.Dispatch(event)
end

-- 检测当前使用武器，并修改
function Hero:CheckUseWeapon()
    if self.heroInfo.awaken > 0 then
        -- 使用觉醒武器
        self.weapon = self:CreateAwakenWeapon()
        if self.weapon then
            self:HideOriginalModelWeapon(false)
        end
    else
        -- 使用初始武器
        if not StringUtil.IsEmpty(self.avatarInfo.originalWeapon) then
            self.weapon = Tool.FindBoneTrans(self.renderObj.transform, self.avatarInfo.originalWeapon)
        end
    end
end

-- 创建觉醒武器
---@return boolean 是否创建成功(已在模型上的也成功)
function Hero:CreateAwakenWeapon()
    if not StringUtil.IsEmpty(self.avatarInfo.awakenWeapon) then
        local weapon = self.renderObj.transform:Find(self.avatarInfo.awakenWeapon)
        if weapon and weapon.gameObject then
            -- 武器已存在
            return weapon
        else
            if not StringUtil.IsEmpty(self.avatarInfo.weaponBone) then
                local boneTransform = Tool.FindBoneTrans(self.renderObj.transform, self.avatarInfo.weaponBone)
                if boneTransform then
                    local prefab = Res.LoadAsset(self.avatarInfo.awakenWeapon)
                    local weapon = GameObject.Instantiate(prefab)
                    weapon.transform.parent = boneTransform
                    weapon.transform.localPosition = self.avatarInfo.awakenWeaponPos
                    weapon.transform.localEulerAngles = self.avatarInfo.awakenWeaponAngle
                    weapon.transform.localScale = Vector3.New(1, 1, 1)
                    return weapon
                end
            end
        end
    end
end

--出生
function Hero:Born()
    self:ResetAttr()
    self:PlayIdle()
    self:SetRenderEnabled(true)
    self.isBorn = true
end

-- 隐藏/显示初始武器部件
function Hero:HideOriginalModelWeapon(hide)
    if not StringUtil.IsEmpty(self.avatarInfo.originalWeapon) then
        local weapon = self.renderObj.transform:Find(self.avatarInfo.originalWeapon)
        if weapon and weapon.gameObject then
            weapon.gameObject:SetActive(not (hide == true))
        end
    end
end

-- 隐藏/显示初始武器部件
function Hero:HideWeapon(hide)
    if self.weapon then
        self.weapon:SetActive(hide == true)
    end
end

--回收
function Hero:Recovery()
    Hero.super.Recovery(self)
    --把影子换回去
    if not isnull(self.shadow) then
        self.shadow.transform:SetParent(self.renderObj.transform)
    end
    if self.renderObj then
        local pool = self.context.pool:GetObjectPool(self.avatarInfo.prefabUrl)
        pool:Store(self.renderObj)
        self.renderObj = nil
    end
end

function Hero:Dispose()
    self:Recovery()
    Hero.super.Dispose(self)
    if self.behavior then
        self.behavior:Dispose()
    end
    if self.effectWidget then
        self.effectWidget:Dispose()
    end
    if self.heroInfo then
        self.heroInfo:Dispose()
        self.heroInfo = nil
    end
    Destroy(self.gameObject)
end

return Hero