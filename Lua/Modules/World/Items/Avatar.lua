---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2019/5/6 10:30
---

local AnimController = require("Game.Modules.Common.Components.AnimController")
local RendererItem = require("Game.Modules.World.Items.RendererItem")

---@class Game.Modules.World.Items.Avatar : Game.Modules.World.Items.RendererItem
---@field avatarVo Game.Modules.World.Vo.AvatarVo
---@field avatarInfo AvatarInfo
---@field cc UnityEngine.CharacterController
---@field animCtrl Game.Modules.Common.Components.AnimController
---@field soundGroup Game.Modules.Common.Sound.SoundGroup
---@field avatarBehavior Game.Modules.Battle.Behaviors.AvatarBehavior
---@field deadOver boolean  是否死亡结束,表示死亡动作播放完毕
---@field isBorn boolean 是否出生
---@field aiParam table<string, any>
local Avatar = class("Game.Modules.World.Items.Avatar", RendererItem)

---@param avatarVo Game.Modules.World.Vo.AvatarVo
function Avatar:Ctor(avatarVo)
    self.avatarVo = avatarVo
    self.avatarInfo = avatarVo.avatarInfo
    self.deadOver = false
    self.isBorn = false
    Avatar.super.Ctor(self, avatarVo)
    self:SetParent()
end

function Avatar:OnRenderObjInit()
    Avatar.super.OnRenderObjInit(self)
    self.gameObject.name = self.avatarInfo.id .. "_" .. self.sid

    self.animCtrl = AnimController.New(self, self.avatarInfo.ctrlUrl)
    self.soundGroup = SoundPlayer:CreateOrGetSoundGroup(SoundType.EFFECT, self.avatarInfo.id .. "_" .. self.sid)

    if self.avatarInfo.scale then
        local orgScale = self.renderObj.transform.localScale
        self.renderObj.transform.localScale = orgScale * self.avatarInfo.scale
    end
    self.shadow = self.renderObj.transform:Find("shadow")
    if self.shadow then
        self.shadow = self.shadow.gameObject
        self.shadow.transform.localEulerAngles = Vector3.New(-90, 0, 0)
        self.shadow.transform:SetParent(self.transform)
        self.shadowOrgScale = self.shadowOrgScale or self.shadow.transform.localScale
        self.shadow.transform.localScale = self.shadowOrgScale
    end

    self:ResetAttr()
    --self:CreateHpBar()
    --self:InitSomething()
end

function Avatar:CreateCC()
    self.cc = self.gameObject:GetOrAddComponent(typeof(UnityEngine.CharacterController))
    self.cc.enabled = true
    self.cc.slopeLimit = 45
    self.cc.stepOffset = 0.3
    self.cc.skinWidth = 0.08
    self.cc.minMoveDistance = 0.001
    self.cc.center = Vector3.New(0,0.89,0)
    self.cc.radius = 0.4
    self.cc.height = 2
    --self.collider = self.cc
end

--设置层级
function Avatar:SetLayer(layerName)
    Layers.SetLayer(self.gameObject, Layers.GetLayerInt(layerName))
end

function Avatar:SetBornPos(pos, forward)
    Avatar.super.SetBornPos(self, pos, forward)
    if self.around then
        self.around:UpdateY()
    end
end

--重置属性
function Avatar:ResetAttr()

end

function Avatar:SetParent()
    self.gameObject.transform:SetParent(self.context.avatarRoot.transform)
end

function Avatar:SetBehaviorEnabled(enabled)

end

---@param enabled boolean
function Avatar:SetRenderEnabled(enabled)
    self.renderObj:SetActive(enabled)
    if self.shadow then
        self.shadow:SetActive(enabled)
    end
end

function Avatar:PlayBorn()
    self.animCtrl:PlayAnim(self.avatarInfo.animBorn)
end

function Avatar:PlayIdle()
    self.animCtrl:PlayAnim(self.avatarInfo.animIdle)
end

function Avatar:CrossFadeToIdle(crossFade)
    self.animCtrl:PlayAnim(self.avatarInfo.animIdle, nil, 1, crossFade or 0.1)
end

function Avatar:PlayWalk()
    self.animCtrl:PlayAnim(self.avatarInfo.animWalk)
end

function Avatar:PlayRun(animSpeed)
    self.animCtrl:PlayAnim(self.avatarInfo.animRun, nil, animSpeed)
end

function Avatar:PlayHit()
    self.animCtrl:PlayAnim(self.avatarInfo.animHit)
end

function Avatar:PlayDead(callback)
    self.animCtrl:PlayAnim(self.avatarInfo.animDead, callback)
end

function Avatar:PlaySing()
    self.animCtrl:PlayAnim(self.avatarInfo.animSing)
end

function Avatar:PlayRoll(speed)
    self.animCtrl:PlayAnim(self.avatarInfo.animRoll, nil, speed)

    local length = self.animCtrl:GetAnimLength(self.avatarInfo.animRoll)
    return length / (speed or 1)
end

function Avatar:PlayWin()
    self.animCtrl:PlayAnim(self.avatarInfo.animWin)
end

function Avatar:JumpTo(destPos, callback, duration)
    if self.animCtrl then
        self.animCtrl:JumpTo(destPos, callback, duration)
    end
end

function Avatar:SlidingTo(seePos, endPos, duration, callback)
    if self.animCtrl then
        self.animCtrl:SlidingTo(seePos, endPos, duration, callback)
    end
end

--执行死亡逻辑
function Avatar:OnDead()
    if self.accountWidget then
        self.accountWidget:Dispose()
    end
    if self.bufferWidget then
        self.bufferWidget:Dispose()
    end
    if not isnull(self.around) then
        --self.around:Dispose()
        self.around.enabled = false
    end
    if self.hpBar then
        self.hpBar:ChangeHp()
    end
    if self.something then
        self.something:Dispose()
    end
end

--是否死亡
function Avatar:IsDead()
    return self.avatarVo.curHp <= 0
end

function Avatar:Dispose()
    if self.animCtrl then
        self.animCtrl:Dispose()
        self.animCtrl = nil
    end
    --if self.effectWidget then
    --    self.effectWidget:Dispose()
    --end
    if self.soundGroup then
        self.soundGroup:Dispose()
        self.soundGroup = nil
    end
    Avatar.super.Dispose(self)
end

return Avatar