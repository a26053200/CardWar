---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2019/5/2 17:13
--- 挂件(类似组件,但是比较轻型)
---

---@class UpdateHandler
---@field type string
---@field delegate Delegate

local LuaMonoBehaviour = require('Betel.LuaMonoBehaviour')

---@class Game.Modules.Common.Components.Widget : Betel.LuaMonoBehaviour
---@field New fun(gameObject:UnityEngine.GameObject|table):Game.Modules.Common.Components.Widget
---@field sequenceList List | table<number, DG.Tweening.Sequence>
---@field updateList List | table<number, UpdateHandler>
---@field delayFunList List | table<number, Handler>
---@field delayFrameFunList List | table<number, Handler>
---@field coList List | table<number, fun()>
local Widget = class("Game.Modules.Common.Components.Widget", LuaMonoBehaviour)

---@param gameObject UnityEngine.GameObject|table
function Widget:Ctor(gameObject)
    Widget.super.Ctor(self,gameObject)
end

---@param callback Handler | fun()
---@return UpdateHandler
function Widget:CreateUpdate(callback, caller, type)
    if self.updateList == nil then
        self.updateList = List.New()
    end
    local handler = callback
    if isFunction(callback) then
        handler = Handler.Get(callback , caller)
    end
    local delegate = Delegate.Get(handler)
    if type == nil or type == Event.UPDATE then
        monoMgr:AddUpdateFun(delegate.execute)
    elseif type == Event.LATE_UPDATE then
        monoMgr:AddLateUpdateFun(delegate.execute)
    elseif type == Event.FIXED_UPDATE then
        monoMgr:AddFixedUpdateFun(delegate.execute)
    end
    local updateHandler = {type = type, delegate = delegate}
    self.updateList:Push(updateHandler)
    return updateHandler
end

---@param updateHandler UpdateHandler
function Widget:RemoveUpdate(updateHandler, remove)
    if remove == nil or remove == true then
        self.updateList:Remove(updateHandler)
    end
    local delegate = updateHandler.delegate
    local type = updateHandler.type
    if type == nil or type == Event.UPDATE then
        monoMgr:RemoveUpdateFun(delegate.execute)
    elseif type == Event.LATE_UPDATE then
        monoMgr:RemoveLateUpdateFun(delegate.execute)
    elseif type == Event.FIXED_UPDATE then
        monoMgr:RemoveFixedUpdateFun(delegate.execute)
    end
    if delegate.handler then
        delegate.handler:Recycl()
    end
    Delegate.Store(delegate)
end

function Widget:Dispose()
    Widget.super.Dispose(self)
    if self.updateList then
        for i = 1, self.updateList:Size() do
            local updateHandler = self.updateList[i]
            self:RemoveUpdate(updateHandler, false)
        end
        self.updateList:Clear()
    end
    self.updateList = nil
end

return Widget