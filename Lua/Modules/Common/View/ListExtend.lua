---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2019/12/27 14:14
--- 列表的扩展表现
---

local LuaMonoBehaviour = require("Betel.LuaMonoBehaviour")

---@class Game.Modules.Common.View.ListExtend : Betel.LuaMonoBehaviour
---@field New fun(list:Betel.UI.BaseList):Game.Modules.Common.View.ListExtend
---@field list Betel.UI.BaseList
---@field showRow number 显示行数
---@field itemDuration number 项目效果持续时间
---@field scrollRect UnityEngine.UI.ScrollRect
local ListExtend = class("Game.Modules.Common.View.ListExtend", LuaMonoBehaviour)

ListExtend.EffectType = {}
ListExtend.EffectType.fade = "fade"
ListExtend.EffectType.move_h = "move_h"
ListExtend.EffectType.move_v_bottom = "move_v_bottom"
ListExtend.EffectType.move_v_top = "move_v_top"
ListExtend.EffectType.scale = "scale"
function ListExtend:Ctor(list, itemDuration, showRow)
    ListExtend.super.Ctor(self,self.gameObject)
    self.list = list
    self.list.listExtend = self
    self.itemDuration = itemDuration or 0.3
    self.showRow = showRow
    self.scrollRect = self.list.gameObject:GetComponent(typeof(UnityEngine.UI.ScrollRect))
    self.isRebuilding = false --是否正在重构
end

--展示项目一个个添加过程
---@param dataList List
---@param itemAddCallback fun(item:Betel.UI.ListItemRenderer)
---@param callback fun()
---@param types table<number, string>
function ListExtend:ShowAddProgress(dataList,types,callback,itemAddCallback)
    if self.isRebuilding then
        return
    end
    self.isRebuilding = true
    types = types == nil and {ListExtend.EffectType.fade,ListExtend.EffectType.move_v_top} or types
    self:StartCoroutine(function()
        local len = dataList:Size()
        self.list:SetData(dataList)
        for i = 1, len do
            local item = self.list:GetItemRenderByIndex(i)
            if item then
                item.gameObject:SetActive(false)
            end
        end
        for i = 1, len do
            local item = self.list:GetItemRenderByIndex(i)
            if item then
                coroutine.step(4)
                self:itemShow(item,true,types,function()
                    if itemAddCallback then
                        itemAddCallback(item)
                    end
                end)
            end
            --while not addOver do
            --    coroutine.step(1)
            --end
            --item.gameObject:SetActive(true)
        end
        if callback then
            callback()
        end
        self.isRebuilding = false
    end)
end

--显示或隐藏项目
---@param item Betel.UI.ListItemRenderer
---@param show boolean
---@param callback fun()
---@param types table<number, string>
function ListExtend:itemShow(item, show, types, callback)
    item.gameObject:SetActive(true)
    local sequence = self:CreateSequence()
    local rect = item.gameObject:GetRect()
    local duration = self.itemDuration
    for i = 1, #types do
        local type = types[i]
        if type == ListExtend.EffectType.fade then
            local canvasGroup = item.gameObject:GetOrAddComponent(typeof(UnityEngine.CanvasGroup))
            canvasGroup.alpha = show and 0 or 1
            sequence:Join(canvasGroup:DOFade(show and 1 or 0,duration))
        elseif type == ListExtend.EffectType.scale then
            item.gameObject.transform.localScale = show and Vector3.zero or Vector3.one
            sequence:Join(item.gameObject.transform:DOScale(show and Vector3.one or Vector3.zero,duration))
        elseif type == ListExtend.EffectType.move_h then
            local orgPos = item.gameObject.transform.localPosition
            local destX = show and orgPos.x or (orgPos.x + rect.sizeDelta.x)
            orgPos.x = show and (orgPos.x + rect.sizeDelta.x)or orgPos.x
            item.gameObject.transform.localPosition = orgPos
            sequence:Join(item.gameObject.transform:DOLocalMoveX(destX,duration))
        elseif type == ListExtend.EffectType.move_v_bottom then
            local orgPos = item.gameObject.transform.localPosition
            local destY = show and orgPos.y or (orgPos.y + rect.sizeDelta.y)
            orgPos.y = show and (orgPos.y + rect.sizeDelta.y)or orgPos.y
            item.gameObject.transform.localPosition = orgPos
            sequence:Join(item.gameObject.transform:DOLocalMoveY(destY,duration))
        elseif type == ListExtend.EffectType.move_v_top then
            local orgPos = item.gameObject.transform.localPosition
            local destY = show and orgPos.y or (orgPos.y - rect.sizeDelta.y)
            orgPos.y = show and (orgPos.y - rect.sizeDelta.y)or orgPos.y
            item.gameObject.transform.localPosition = orgPos
            sequence:Join(item.gameObject.transform:DOLocalMoveY(destY,duration))
        end
    end
    sequence:AppendInterval(duration)
    sequence:AppendCallback(callback)
end

function ListExtend:Dispose()
    ListExtend.super.Dispose(self)
    self.list.listExtend = nil
    self.list = nil
end

return ListExtend