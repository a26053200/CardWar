---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2019/6/13 17:44
--- 资源对象池代理
---

local AssetPool = require("Game.Modules.Common.Pools.AssetPool")

---@class Game.Modules.Common.Pools.AssetPoolProxy
---@field New fun(pool:string|UnityEngine.GameObject):Game.Modules.Common.Pools.AssetPoolProxy
---@field pool List
---@field poolRoot UnityEngine.GameObject
---@field objectPoolMap table<string,Game.Modules.Common.Pools.AssetPool> 对象池信息
local PoolProxy = class("Module.Common.Pools.PoolProxy")

--构造函数
---@param pool string    @ 对象预制路径
function PoolProxy:Ctor(pool)
    if isString(pool) then
        self.poolRoot = GameObject.New(pool)
    else
        self.poolRoot = pool
    end
    self.objectPoolMap = {}
end

--初始化对象池
---@param poolsInfo table<number,PoolInfo>
function PoolProxy:InitObjectPool(poolsInfo)
    for i = 1, #poolsInfo do
        if poolsInfo[i].battleUnitId then
            local battleInfo = BattleUnitConfig.Get(poolsInfo[i].battleUnitId)
            local avatarInfo = AvatarConfig.Get(battleInfo.avatarName)
            self:InitObjectByPool(avatarInfo.prefabUrl, self.poolRoot.transform, poolsInfo[i].initNum, true)
        elseif poolsInfo[i].effectName then
            local effectInfo = EffectConfig.Get(poolsInfo[i].effectName)
            self:InitObjectByPool(effectInfo.prefabUrl, self.poolRoot.transform, poolsInfo[i].initNum)
        elseif poolsInfo[i].avatarUIName then
            local uiPoolInfo = AvatarUIConfig.Get(poolsInfo[i].avatarUIName)
            self:InitObjectByPool(uiPoolInfo.prefabUrl, self.poolRoot.transform, poolsInfo[i].initNum)
        else
            self:InitObjectByPool(poolsInfo[i].prefabUrl, self.poolRoot.transform, poolsInfo[i].initNum)
        end
    end
end

--初始化对象池创建
---@return UnityEngine.GameObject
function PoolProxy:InitObjectByPool(prefabUrl, parent, initNum, log)
    local pool = self.objectPoolMap[prefabUrl] ---@type Game.Modules.Common.Pools.AssetPool
    if pool then
        pool:ExpandPoolObjNum(initNum)
    else
        pool = AssetPool.New(prefabUrl, parent, initNum)
        self.objectPoolMap[prefabUrl] = pool
    end
    if log then
        print(string.format("Create Pool - num:%s url:%s", pool.initNum, prefabUrl))
    end
end

--从对象池创建
---@return UnityEngine.GameObject
function PoolProxy:CreateObjectByPool(prefabUrl)
    local pool = self.objectPoolMap[prefabUrl] ---@type Game.Modules.Common.Pools.AssetPool
    if pool then
        return pool:Pop()
    else
        --logError(string.format("There is not pool -- %s!", prefabUrl))
        return nil
    end
end

--获取的对象池
---@return Game.Modules.Common.Pools.AssetPool
function PoolProxy:GetObjectPool(prefabUrl)
    local pool = self.objectPoolMap[prefabUrl] ---@type Game.Modules.Common.Pools.AssetPool
    if pool then
        return pool
    else
        --logWarning(string.format("There is not pool -- %s!", prefabUrl))
        return nil
    end
end

--回收对象
---@param gameObject UnityEngine.GameObject
---@return boolean 回收是否成功
function PoolProxy:StoreObject(prefabUrl, gameObject)
    local pool = self.objectPoolMap[prefabUrl] ---@type Game.Modules.Common.Pools.AssetPool
    if pool then
        pool:Store(gameObject)
        return true
    else
        --logError(string.format("StoreObject is Fail! There is not pool -- %s!", prefabUrl))
        return false
    end
end

--释放所有对象池
function PoolProxy:Dispose()
    for prefabUrl, pool in pairs(self.objectPoolMap) do
        if pool then
            pool:Dispose()
        end
    end
    Destroy(self.poolRoot)
end

return PoolProxy