---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2019/7/1 17:55
---

local Sound = require("Game.Modules.Common.Sound.Sound")
local Widget = require("Game.Modules.Common.Components.Widget")

---@class Game.Modules.Common.Sound.SoundGroup : Game.Modules.Common.Components.Widget
---@field New fun(soundTypeObj:UnityEngine.GameObject, groupName:string, soundVolume:number):Game.Modules.Common.Sound.SoundGroup
---@field groupObj UnityEngine.GameObject
---@field soundVolume number 音量
---@field soundMap table<string,Game.Modules.Common.Sound.Sound>
---@field soundQueue table<string,Game.Modules.Common.Sound.Sound>
local SoundGroup = class("SoundGroup",Widget)

function SoundGroup:Ctor(soundTypeObj, groupName, soundVolume)
    if not StringUtil.IsEmpty(groupName) then
        self.groupName = groupName
        self.groupObj = GameObject.New(string.format("[Group_%s]", groupName))
        self.groupObj.transform:SetParent(soundTypeObj.transform)
    else
        self.groupObj = soundTypeObj
    end
    SoundGroup.super.Ctor(self,self.groupObj)
    self.soundVolume = soundVolume
    self.soundMap = {}
end

--播放声音
---@return Game.Modules.Common.Sound.Sound
function SoundGroup:DoPlay(soundName, audioSourceParams)
    if StringUtil.IsEmpty(soundName) then
        logError("sound name can not is a empty!")
        return
    end
    local soundInfo = SoundConfig.Get(soundName)
    if soundInfo == nil then return end

    local soundVolume = SoundPlayer.soundVolume[soundInfo.type] or self.soundVolume
    if soundVolume <= 0 then
        --音量为0时直接return
        return
    end

    local soundId = tostring(soundInfo.id)
    local sound = self.soundMap[soundId]
    if sound == nil then
        sound = Sound.New(soundInfo, self.groupObj, soundVolume, audioSourceParams):CreateOrPlay()
        self.soundMap[soundId] = sound
        --新建的声音会自动播放
    else
        if not isnull(sound.audioSource) then
            if audioSourceParams then
                for k,v in pairs(audioSourceParams) do
                    sound.audioSource[k] = v
                end
            else
                sound.audioSource.time = tonumber(soundInfo.beginTime)
            end
        end
        sound:SetSoundVolume(soundVolume)
        sound:FadeIn()
        sound.num = sound.num + 1 --播放次数 + 1
    end
    --print("播放声音:"..soundInfo.intrc.." - "..soundInfo.file)
    self.lastSound = sound
    return sound
end

--强制播放,停止之前所有的声音
---@param soundName string 声音名称
---@param fadeOutOther boolean 是否淡出该组的其他声音
---@return Game.Modules.Common.Sound.Sound
function SoundGroup:Play(soundName,fadeOutOther, audioSourceParams)
    if StringUtil.IsEmpty(soundName) then
        --logError("sound name can not is a empty!")
        return
    end
    if fadeOutOther then
        for _,sound in pairs(self.soundMap) do
            sound:FadeOut()
        end
    end
    return self:DoPlay(soundName, audioSourceParams)
end

--设置音量
function SoundGroup:SetSoundVolume(volume)
    self.soundVolume = volume
    for _,sound in pairs(self.soundMap) do
        sound:SetSoundVolume(volume)
    end
end

--淡出所有
function SoundGroup:FadeOutAll(dispose)
    for _,sound in pairs(self.soundMap) do
        sound:FadeOut(function(sound)
            if dispose then
                sound:Dispose()
            end
        end)
    end
    if dispose then
        self.soundMap = {}
    end
end

--停止所有
function SoundGroup:StopAll(dispose)
    for _,sound in pairs(self.soundMap) do
        sound:Stop()
    end
    if dispose then
        self:Dispose()
    end
end

--释放当前所有声音的资源
function SoundGroup:Dispose()
    SoundGroup.super.Dispose(self)
    if self.soundMap then
        for _,sound in pairs(self.soundMap) do
            sound:Dispose()
        end
        self.soundMap = {}
    end
    --动态组需要销毁
    if not StringUtil.IsEmpty(self.groupName) then
        Destroy(self.groupObj)
    end
end

return SoundGroup