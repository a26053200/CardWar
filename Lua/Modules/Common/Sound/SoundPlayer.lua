---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2018/11/22 16:33
---

local SoundConfig = require("Data.SoundConfig")
local SoundGroup = require("Game.Modules.Common.Sound.SoundGroup")
local Sound = require("Game.Modules.Common.Sound.Sound")

---@class Game.Modules.Common.Sound.SoundPlayer : View
---@field lastBGM Game.Modules.Common.Sound.Sound
---@field soundMap <string,Game.Modules.Common.Sound.Sound>
---@field soundGroupMap <string,Game.Modules.Common.Sound.SoundGroup>
local SoundPlayer = class("Game.Modules.Common.Sound.SoundPlayer")

local Default_Group = "[Group_Default]"

SoundPlayer.SoundType = SoundType

function SoundPlayer:Ctor()
    self.soundMap = {}
    self.soundObjMap = {}
    self.soundGroupMap = {}
    self.soundVolume = {} --声音音量

    self.soundVolume[SoundType.UI]  = 1     --UI声音音量
    self.soundVolume[SoundType.BGM] = 1     --背景音乐音量
    self.soundVolume[SoundType.EFFECT] = 1  --各种效果音量
    self.soundVolume[SoundType._3D] = 1     --3D声音音量
    self.soundVolume[SoundType.VOICE] = 1   --语音效果音量
    self.soundVolume[SoundType.SPECIAL] = 1   --语音效果音量
end

function SoundPlayer:Init()
    self.gameObject = GameObject.New()
    self.gameObject.name = "[Sound]"
    GameObject.DontDestroyOnLoad(self.gameObject)
    self.soundObjMap[SoundType.UI] = self:CreateSoundObj("[Sound_UI]")
    self.soundObjMap[SoundType.BGM] = self:CreateSoundObj("[Sound_BGM]")
    self.soundObjMap[SoundType.EFFECT] = self:CreateSoundObj("[Sound_EFFECT]")
    self.soundObjMap[SoundType.VOICE] = self:CreateSoundObj("[Sound_VOICE]")
    self.soundObjMap[SoundType.SPECIAL] = self:CreateSoundObj("[Sound_SPECIAL]")
    self.lastBGM = nil
end

function SoundPlayer:SetAllSoundVolume(volume)
    if self.lastBGM then self.lastBGM:SetSoundVolume(volume) end
    self.soundVolume[SoundType.UI]  = volume     --UI声音音量
    self.soundVolume[SoundType.BGM] = volume     --背景音乐音量
    self.soundVolume[SoundType.EFFECT] = volume  --各种效果音量
    self.soundVolume[SoundType._3D] = volume     --3D声音音量
    self.soundVolume[SoundType.VOICE] = volume     --3D声音音量
end


---@return UnityEngine.GameObject
function SoundPlayer:CreateSoundObj(name,parent)
    local obj =  GameObject.New(name)
    if parent then
        obj.transform:SetParent(parent)
    else
        obj.transform:SetParent(self.gameObject.transform)
    end
    return obj
end


---@return Game.Modules.Common.Sound.SoundGroup
function SoundPlayer:CreateOrGetSoundGroup(sountType, groupName)
    local soundGroup
    if StringUtil.IsEmpty(groupName) then
        soundGroup = self.soundGroupMap[sountType]
    else
        soundGroup = self.soundGroupMap[sountType.. "_" .. groupName]
    end
    if soundGroup == nil then
        local soundTypeObj = self.soundObjMap[sountType]
        soundGroup = SoundGroup.New(soundTypeObj, groupName,self.soundVolume[sountType])
        if StringUtil.IsEmpty(groupName) then
            self.soundGroupMap[sountType] = soundGroup
        else
            self.soundGroupMap[sountType.. "_" .. groupName] = soundGroup
        end
    end
    return soundGroup
end

--播放声音
---@param soundName string 声音名称
---@param fadeOutOther boolean 是否淡出该组的其他声音
---@return Game.Modules.Common.Sound.Sound
function SoundPlayer:Play(soundName, fadeOutOther)
    if StringUtil.IsEmpty(soundName) then
        return
    end
    local soundInfo = SoundConfig.Get(soundName)
    if soundInfo == nil then return end
    local soundGroup = self:CreateOrGetSoundGroup(soundInfo.type)
    local sound = soundGroup:Play(soundName,fadeOutOther)
    return sound
end

function SoundPlayer:MuteBGM(muteVolume)
    if self.resumeBGM_Tween then
        self.resumeBGM_Tween:Kill()
    end
    local bgmSoundGroup = self:CreateOrGetSoundGroup(SoundType.BGM)
    if bgmSoundGroup then
        local volume = (muteVolume or 0)
        bgmSoundGroup:SetSoundVolume(volume)
    end
end

function SoundPlayer:ResumeBGM()
    local bgmSoundGroup = self:CreateOrGetSoundGroup(SoundType.BGM)
    if bgmSoundGroup then
        local src = bgmSoundGroup.soundVolume
        local dst = self.soundVolume[SoundType.BGM]
        if src == dst then
            return
        end
        self.resumeBGM_Tween =  Tool.DOTweenFloat(src, dst,1,function(value)
            bgmSoundGroup:SetSoundVolume(value)
        end)
    end
end

--播放声音BGM
---@param bgmName string
function SoundPlayer:PlaySceneBGM(bgmName, audioSourceParams)
    local bgmSoundGroup = self:CreateOrGetSoundGroup(SoundType.BGM)
    bgmSoundGroup:FadeOutAll(true)
    local sound = bgmSoundGroup:Play(bgmName, true, audioSourceParams)
    self.lastBGM = sound
    return sound
end

--停止声音BGM
function SoundPlayer:StopSceneBGM()
    local bgmSoundGroup = self:CreateOrGetSoundGroup(SoundType.BGM)
    if bgmSoundGroup then
        bgmSoundGroup:FadeOutAll(true)
    end
end

return SoundPlayer