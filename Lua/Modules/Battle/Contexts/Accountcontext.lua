---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2020/4/9 14:38
--- 攻击结算上下文
---

local PoolVo = require("Module.Common.Pools.PoolObject")
---@class Module.World.Contexts.AccountContext : Game.Modules.Common.Pools.PoolObject
---@field New fun():Module.World.Contexts.AccountContext
---@field avatar Game.Modules.Battle.Items.Avatar 攻击者
---@field targetList table<number, Game.Modules.Battle.Items.Avatar> 目标
---@field accountTargetList table<number, Game.Modules.Battle.Items.Avatar> 已经被结算的目标
---@field account AccountInfo
---@field effect Module.World.Items.EffectItem --特效结算
local AccountContext = class("Module.World.Contexts.AccountContext", PoolVo)

local Sid = 1

function AccountContext:Ctor()
    self.accountTargetList = List.New()
end

---@param skillVo Game.Modules.Battle.Vo.SkillVo
---@param attacker Game.Modules.Battle.Items.Avatar
---@param account AccountInfo
function AccountContext:Init(skillVo, attacker, account)
    self.id = Sid
    Sid = Sid + 1
    self.avatar = attacker
    self.account = account
    self.skillVo = skillVo
end

--开始
function AccountContext:Start()
    if self.avatar.context.mode == BattleMode.Grid then
        local oppseCamp = BattleUtils.GetOppseCamp(self.avatar.avatarVo.camp) --对立阵营
        self.targetList = self.avatar.context.battleLayout:GetTargetList(oppseCamp, self.account.gridSelect)
        self.avatar.context.battleLayout:SetAttackSelect(oppseCamp, self.account.gridSelect, true)
    end
end

--过程
function AccountContext:UpdateProgress()

end

--是否被结算过
function AccountContext:HasAccount(target)
    return self.accountTargetList:Contain(target)
end
--结算
---@param target Game.Modules.Battle.Items.Avatar
function AccountContext:OnAccount(target)
    self.accountTargetList:Add(target)
    self:DamageAccount(self.skillVo, self.account, target)
    --检查目标是否死亡
    self.avatar.accountWidget:OnCheckDead(self.skillVo,target)
end

--最终伤害结算
---@param target Game.Modules.Battle.Items.Avatar
---@param skillVo Game.Modules.Battle.Vo.SkillVo
---@param account AccountInfo
function AccountContext:DamageAccount(skillVo, account, target)
    --是否增益结算 例如加血  上buff等
    local isHelpful = account.targetMode == TargetMode.Self or account.targetMode == TargetMode.Friend
    local skillInfo = skillVo.skillInfo
    local avatarAtk = 0
    local minDam = 0
    if account.targetMode == TargetMode.Enemy
            --or account.targetMode == TargetMode.AOE
            or account.targetMode == TargetMode.Pos then
        avatarAtk = self.avatar.avatarInfo.atk
        minDam = 1
    end
    local hurtInfo = {} ---@type HurtInfo
    hurtInfo.atker = self.avatar
    hurtInfo.target = target
    hurtInfo.isHelpful = isHelpful
    hurtInfo.atk = math.random(account.minAtk, account.maxAtk) --浮动攻击
    hurtInfo.def = target and target.avatarInfo.def or 0
    local crit = account.crit + self.avatar.avatarInfo.crit -- 技能本身的暴击率与自身暴击率相加
    hurtInfo.crit = (math.random() <= crit) and account.critPower or 1 --暴击
    hurtInfo.dam = math.max(minDam, math.floor((hurtInfo.atk + avatarAtk - hurtInfo.def) * hurtInfo.crit)) --简单计算:伤害 - 防御
    hurtInfo.acc = math.random() --命中率
    local isMiss = false
    --计算闪避
    local signet = target.signetMap[self.avatar.sid .. "_" .. skillInfo.id]
    if hurtInfo.acc > self.avatar.avatarInfo.acc
            or signet == SignetType.Dodge then
        isMiss = true
    end
    if signet ~= nil then
        target.performancePlayer:Play(account.signetPerformance,nil,self.avatar, account)
    end

    if isMiss then
        hurtInfo.miss = true
        --print("miss")
        if target then
            target:DoHurt(hurtInfo)
        end
        return
    end
    hurtInfo.miss = false
    if target then
        if isHelpful then
            target.avatarVo.curHp = math.min(target.avatarVo.curHp + hurtInfo.dam, target.avatarVo.maxHp)
            target:DoHurt(hurtInfo)
        else
            target.avatarVo.curHp = math.max(0,target.avatarVo.curHp - hurtInfo.dam)
            target:DoHurt(hurtInfo)
            target:PlayHit()
            target.soundGroup:Play(skillInfo.hitSound)
        end
        self:DisplayHurt(target, skillInfo, account)
    else
        --无目标结算
    end
end

--受击表现
---@param target Game.Modules.Battle.Items.Avatar
---@param skillInfo SkillInfo
---@param account AccountInfo
function AccountContext:DisplayHurt(target, skillInfo, account)
    target.performancePlayer:Play(account.targetPerformance,nil,self.avatar)
    --buff 计算
    if not StringUtil.IsEmpty(account.buffer) then
        target.bufferWidget:Add(account.buffer)
    end
    if not StringUtil.IsEmpty(skillInfo.hitEffect) then
        target.effectWidget:Play(skillInfo.hitEffect, target)
        target.specialEffect:PlaySurround() --播放受击包围效果
    end
end

--结束
function AccountContext:End()
    if self.avatar.context.mode == BattleMode.Grid then
        local oppseCamp = BattleUtils.GetOppseCamp(self.avatar.avatarVo.camp) --对立阵营
        self.avatar.context.battleLayout:SetAttackSelect(oppseCamp, self.account.gridSelect, false)
    end
    self:Dispose()
end

function AccountContext:Dispose()
    self.effect = nil
    self.accountTargetList:Clear()
    AccountContextPool:Store(self)
end

return AccountContext