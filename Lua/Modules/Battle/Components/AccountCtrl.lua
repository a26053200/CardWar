---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2020/4/18 23:06
--- 结算控制器
---

local Widget = require("Game.Modules.Common.Components.Widget")
---@class Game.Modules.Battle.Components.AccountCtrl : Game.Modules.Common.Components.Widget
---@field New fun(battleUnit:Game.Modules.World.Items.BattleUnit):Game.Modules.Battle.Components.AccountCtrl
---@field battleUnit Game.Modules.World.Items.BattleUnit
---@field performanceList List | table<number, Game.Modules.Battle.Performances.PerformanceBase>
local AccountCtrl = class("Game.Modules.Battle.Performances.AccountCtrl",Widget)

---@param battleUnit Game.Modules.World.Items.BattleUnit
function AccountCtrl:Ctor(battleUnit)
    self.battleUnit = battleUnit
end

---@param skillVo Game.Modules.Battle.Vo.SkillVo
---@param callback Handler
function AccountCtrl:Account(skillVo, callback)
    self.battleUnit.performancePlayer:Play(skillVo.skillInfo.performance,function()
        if callback then
            callback:Execute()
        end
    end, skillVo)
end

---@param animInfo AnimInfo
function AccountCtrl:AccountProgress(animInfo, accountCallback)
    local animLength = self.battleUnit.animCtrl:GetAnimLength(animInfo.animName)
    self:CreateDelay(animInfo.accountPoint * (animLength / animInfo.animSpeed), accountCallback)
end

---@param animInfo AnimInfo
---@param accounts table<number, AccountInfo>
function AccountCtrl:MultiAccountProgress(animInfo, accounts, accountCallback)
    local animLength = self.battleUnit.animCtrl:GetAnimLength(animInfo.animName)
    for i = 1, #accounts do
        self:CreateDelay(accounts[i].accountPoint * (animLength / animInfo.animSpeed), function()
            accountCallback(accounts[i])
        end)
    end
end

return AccountCtrl