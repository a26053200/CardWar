---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2020/7/4 20:56
---

local AttackRound = require("Game.Modules.Battle.Report.AttackRound")
local BaseBehavior = require("Game.Modules.Common.Behavior.BaseBehavior")

---@class Game.Modules.Battle.Report.ReportBehavior:Game.Modules.Common.Behavior.BaseBehavior
---@field New fun(context : Game.Modules.Battle.Report.ReportContext) : Game.Modules.Battle.Report.ReportBehavior
---@field context Game.Modules.Battle.Report.ReportContext
---@field attackSortList List | table<number, Game.Modules.World.Items.Avatar>
---@field currAttackRound Game.Modules.Battle.Report.AttackRound --当前攻击回合
---@field isAllDead boolean
local ReportBehavior = class("Game.Modules.Battle.Report.ReportBehavior", BaseBehavior);

---@param context Game.Modules.Battle.Report.ReportContext
function ReportBehavior:Ctor(context)
    ReportBehavior.super.Ctor(self)
    self:AppendBehavior(self:RoundStart(),      "ReportBehavior RoundStart")
    self:AppendBehavior(self:RoundProgress(),   "ReportBehavior RoundProgress")
    self:AppendBehavior(self:RoundEnd(),        "ReportBehavior RoundEnd")
    self.context = context
    self.isRoundOver = true
    self.attackSortList = List.New()
    self.currAttackRound = nil
end

function ReportBehavior:Play()
    ReportBehavior.super.Play(self)
    self.isRoundOver = true
    self.attackSortList = List.New()
    self.currAttackRound = nil
    self.isAllDead = false
end

--重置攻击队列
function ReportBehavior:ResetAttackSortArray()
    self.attackSortList:Clear()
    --测试时，随机攻击顺序
    local tempList = List.New()
    tempList:Concat(self.context:GetCampUnitList(Camp.Atk))
    tempList:Concat(self.context:GetCampUnitList(Camp.Def))
    self.totalAttackNum = tempList:Size()
    local randoms = Tool.GetRandomArray(self.totalAttackNum)
    for i = 1, #randoms do
        self.attackSortList:Add(tempList[randoms[i]])
    end
end

--回合开始阶段
--排序整个回合的攻击队列
function ReportBehavior:RoundStart()
    local behavior = self:CreateSubBehavior()
    behavior:AppendState(function()
        if self.isRoundOver then
            self.isRoundOver = false
            --self:_debug("RoundBehavior RoundStart")
            self:ResetAttackSortArray()
        end
        self:NextState()
    end)
    return behavior
end


--按队列进行攻击
function ReportBehavior:RoundProgress()
    local behavior = self:CreateSubBehavior()
    behavior:AppendState(function()
        local waitAttackOver = true
        self:StartCoroutine(function()
            --self:_debug("ReportBehavior RoundProgress " .. self.attackSortList:Size() .. "/" .. self.totalAttackNum)
            local battleUnit = self.attackSortList:Shift() ---@type Game.Modules.World.Items.BattleUnit
            if battleUnit then
                if battleUnit:IsDead() then
                    self:_debug("攻击者已经死亡 - " .. battleUnit.debugName)
                else
                    self.currAttackRound = AttackRound.New(function()
                        waitAttackOver = false
                    end)
                    self.currAttackRound:SetBattleUnit(battleUnit)
                    self.currAttackRound:RoundStart()
                    --self.currAttackRound:RoundEnd()
                    while waitAttackOver do
                        coroutine.step(1)
                        --print("waitAttackOver")
                    end
                    self.currAttackRound = nil
                end
            else
                self:_debug("没有攻击者了")
            end
            --self:_debug("RoundBehavior Round Attack Over")
            self:NextState()
        end)
    end)
    return behavior
end

--回合结束阶段
function ReportBehavior:RoundEnd()
    local behavior = self:CreateSubBehavior()
    behavior:AppendState(function()
        if self.attackSortList:Size() == 0 then
            self.isRoundOver = true
            self:_debug("RoundBehavior RoundEnd")
        end
        self.currAttackRound = nil
        if self.context:IsCampAllDead(Camp.Def) then
            self:StopRound(Camp.Atk)
        elseif self.context:IsCampAllDead(Camp.Atk)then
            self:StopRound(Camp.Def)
        else
            self:NextState()
        end
    end)
    return behavior
end

function ReportBehavior:StopRound(winCamp)
    print("战斗结束 win:" .. winCamp)
    self.isAllDead = true
    self:Stop()
end

function ReportBehavior:Stop()
    ReportBehavior.super.Stop(self)
    --剩下的单位都停止行为
    self.attackSortList:Clear()
end

function ReportBehavior:Dispose()
    ReportBehavior.super.Dispose(self)
end

--调试
function ReportBehavior:_debug(msg)
    print(string.format("<color=#FFFF00FF>[%s][%s]</color>\n<color=#FFDD00FF>%s</color>",self.__classname,self.stateMachine.id,msg))
end

return ReportBehavior