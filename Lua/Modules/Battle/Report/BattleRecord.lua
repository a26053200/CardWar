---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2020/7/4 21:26
--- 战斗记录
---

---@class Game.Modules.Battle.Report.BattleRecord
---@field New fun(roleId, context):Game.Modules.Battle.Report.BattleRecord
---@field recordList List | table<number, Game.Modules.Battle.Report.AttackRound>
---@field unitCards List | table<number, Game.Modules.Battle.Report.Nodes.UnitNode>
---@field context Game.Modules.Battle.Report.ReportContext
local BattleRecord = class("Game.Modules.Battle.Report.BattleRecord");

---@param context Game.Modules.Battle.Report.ReportContext
function BattleRecord:Ctor(context)
    self.recordList = List.New()
    self.context = context
    self:InitBattleUnitCards()
end

---@param attackRound Game.Modules.Battle.Report.AttackRound
function BattleRecord:Push(attackRound)
    self.recordList:Push(attackRound)
end

---@return table<number, Game.Modules.Battle.Report.Nodes.UnitNode>
function BattleRecord:InitBattleUnitCards()
    local unitList = List.New() ---@type table<number, Game.Modules.World.Items.BattleUnit>
    unitList:Concat(self.context:GetCampUnitList(Camp.Atk))
    unitList:Concat(self.context:GetCampUnitList(Camp.Def))
    self.unitCards = {}
    for i = 1, unitList:Size() do
        local cardVo = unitList[i].ownerCardVo
        if cardVo then
            local unitCard = {}
            unitCard.sid = unitList[i].sid
            unitCard.camp = unitList[i].battleUnitVo.camp
            unitCard.layoutIndex = unitList[i].battleUnitVo.layoutIndex
            --卡牌信息
            unitCard.cardId = cardVo and cardVo.cardInfo.id or 0
            unitCard.rank = cardVo and cardVo.rank or 0
            unitCard.level = cardVo and cardVo.level or 0
            unitCard.star = cardVo and cardVo.star or 0
            table.insert(self.unitCards, unitCard)
        end
    end
end

---@return table<number, Game.Modules.Battle.Report.Nodes.ReportNode>
function BattleRecord:GetReportNodes()
    local nodes = {}
    for i = 1, self.recordList:Size() do
        table.insert(nodes, self.recordList[i]:GetReportNode())
    end
    return nodes
end

---@return table<number, Game.Modules.Battle.Report.Nodes.AccountNode>
function BattleRecord:GetAccountNodes()
    local list = List.New()
    for i = 1, self.recordList:Size() do
        list:Concat(List.New(self.recordList[i]:GetAccountNodes()))
    end
    return list:GetArray()
end

return BattleRecord