---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2020/4/18 23:10
--- 标准的表现
---

local PerformanceBase = require("Game.Modules.Battle.Performances.PerformanceBase")
---@class Game.Modules.Battle.Performances.Standard : Game.Modules.Battle.Performances.PerformanceBase
---@field New fun(avatar: Game.Modules.World.Items.BattleUnit):Game.Modules.Battle.Performances.Standard
---@field accountContextList table<number, Game.Modules.World.Contexts.AccountContext>
---@field accounts table<number, AccountInfo>
---@field accountCount number
local Standard = class("Game.Modules.Battle.Performances.Standard", PerformanceBase)

function Standard:Ctor(battleUnit, performanceInfo)
    Standard.super.Ctor(self, battleUnit, performanceInfo)
    self.sequenceOver = false
    self.accountContextList = {}
    self.accountCount = 0
end

---@param sequence DG.Tweening.Sequence
function Standard:OnBeginPerformance(sequence)
    Standard.super.OnBeginPerformance(self, sequence)

    self.skillVo = self.args[1] ---@type Game.Modules.Battle.Vo.SkillVo

    self:StartCoroutine(function()
        self.accounts = self.performanceInfo.accounts
        self:TargetSelect()
        for i = 1, self.performanceInfo.times do
            self:Process()
            coroutine.wait(self.performanceInfo.interval)
        end
        while self.accountCount < self.performanceInfo.times * #self.accounts do
            coroutine.step(1)
        end
        self.sequenceOver = true
    end)
    return true
end

--开始
function Standard:TargetSelect()
    self.opposeCamp = BattleUtils.GetOpposeCamp(self.battleUnit.avatarVo.camp) --对立阵营
    self.targetGridList = GridUtils.GetGrids(self.performanceInfo.gridSelect,self.opposeCamp, self.battleUnit)
    self.targetList = self.battleUnit.context.battleLayout:GetTargetList(self.opposeCamp, self.targetGridList)
    self.battleUnit.context.battleLayout:SetAttackSelect(self.opposeCamp, self.targetGridList, true)
end

function Standard:Process()
    self.battleUnit:PlayIdle()
    self.battleUnit.accountCtrl:AccountProgress(self.performanceInfo.animInfo,function()
        for i = 1, #self.accounts do
            local account = self.accounts[i]
            local accountContext = World.CreateAccountContext(self.skillVo, self.battleUnit, account)
            --local effect = self.avatar.effectWidget:Play(self.skillVo.skillInfo.effect,nil, nil , startPosList[i])
            --effect.tagPos = destPosList[i]
            --effect.minDistance = 0
            --accountContext.effect = effect
            accountContext:Start(self.performanceInfo.gridSelect)
            accountContext:ExecuteAccount()
            self.accountCount = self.accountCount + 1
            table.insert(self.accountContextList, accountContext)
            --self.lastEffect = effect
        end
    end)
    self.battleUnit.animCtrl:PlayAnimInfo(self.performanceInfo.animInfo)
end

--重写阻塞函数
---@param sequence DG.Tweening.Sequence
function Standard:OnWaitPerformance(sequence)
    --等待开始阶段结束
    while not self.sequenceOver do
        coroutine.step(1)
    end
end

function Standard:Dispose()
    Standard.super.Dispose(self)
    for i = 1, #self.accountContextList do
        self.accountContextList[i]:End()
    end
    self.battleUnit.context.battleLayout:SetAttackSelect(self.opposeCamp, self.targetGridList, false)
end

return Standard