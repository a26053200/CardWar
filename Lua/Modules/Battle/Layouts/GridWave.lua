---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2020/2/21 10:48
--- 每个网格区域中的一波
---

--单个波数据
---@class GridWaveInfo : WaveBaseInfo
---@field waveMode string 类型 boss , normal
---@field needPause boolean
---@field index number
---@field wavePoints table<number,WavePointInfo>
---@field delay number
---@field enterScript string  进入该区域触发的剧情
---@field exitScript string   离开该区域触发的剧情

local Monster = require("Module.World.Items.Monster")
local WaveBase = require("Module.World.Layouts.WaveBase")

---@class Game.Modules.Battle.Layouts.GridWave : Game.Modules.World.Layouts.WaveBase
---@field New fun(waveInfo:GridWaveInfo, forward:UnityEngine.Vector3):Game.Modules.Battle.Layouts.GridWave
---@field forward UnityEngine.Vector3 朝向
local GridWave = class("Game.Modules.Battle.Layouts.GridWave", WaveBase)

---@param waveInfo GridWaveInfo
---@param forward UnityEngine.Vector3 朝向
function GridWave:Ctor(waveInfo, forward)
    GridWave.super.Ctor(self)
    self.waveInfo = waveInfo
    self.forward = forward
    self.monsterList = List.New()
end

---@param callback fun()
function GridWave:Refresh(callback)
    self:StartCoroutine(function()
        local duration = 1 / #self.waveInfo.wavePoints
        for i = 1, #self.waveInfo.wavePoints do
            local wavePoint = self.waveInfo.wavePoints[i]
            if wavePoint.delay > 0 then
                coroutine.wait(wavePoint.delay)
            end
            local monsterVo = World.CreateMonsterVo(wavePoint.avatarName)--克隆数据
            if monsterVo.avatarInfo.avatarType == AvatarType.Monster then
                monsterVo.camp = Camp.Def --所有怪物默认都是守方阵营
                local monster = Monster.New(monsterVo, self.context)
                local layoutGrid = self.context.battleLayout:GetGridByIndex(Camp.Def, wavePoint.grid)
                monster:SetBornPos(layoutGrid.transform.position, self.forward)
                layoutGrid:SetOwner(monster)
                if wavePoint.bornMode == WaveBornMode.BornEffect then
                    monster:Born()
                    coroutine.step()
                elseif wavePoint.bornMode == WaveBornMode.WaitBorn then
                    local bornOver = false
                    monster:Born(function()
                        bornOver = true
                    end)
                    while not bornOver do
                        coroutine.step()
                    end
                else
                    monster:OnBorn()
                end
                monster:CreateHpBar()
                monster:ResetAttr()
                monster.isBorn = true
                monster:SetRenderEnabled(true)
                self.monsterList:Push(monster)
            end
        end
        if callback then
            callback()
        end
    end)
end

function GridWave:Active()
    if self.isActive then
        return --重复激活
    end
    self.isActive = true
end

--是否都已经死亡
function GridWave:IsAllDead()
    if not self.isActive then
        return false
    end
    local allDead = true
    for i = 1, self.monsterList:Size() do
        local monster = self.monsterList[i] ---@type Module.World.Items.Monster
        if not monster:IsDead() then
            allDead = false
            break;
        end
    end
    return allDead
end

--是否都已经死亡
function GridWave:IsAllDeadOver()
    if not self.isActive then
        return false
    end
    local allDead = true
    for i = 1, self.monsterList:Size() do
        local monster = self.monsterList[i] ---@type Module.World.Items.Monster
        if not monster.deadOver then
            allDead = false
            break;
        end
    end
    return allDead
end

function GridWave:Clear()

end

return GridWave