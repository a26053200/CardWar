---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2020/4/2 14:01
--- 战斗布局
---


local LuaMonoBehaviour = require("Betel.LuaMonoBehaviour")

---@class Game.Modules.Battle.View.BattleLayout : Betel.LuaMonoBehaviour
---@field New fun(context : WorldContext, areaObject : UnityEngine.GameObject):Game.Modules.Battle.View.BattleLayout
---@field context WorldContext
---@field areaPointObj UnityEngine.GameObject
---@field checkPointData CheckPointData
---@field gridLayoutMap table<Camp, table<number, Game.Modules.Battle.View.LayoutGrid>>
local BattleLayout = class("Game.Modules.Battle.View.BattleLayout", LuaMonoBehaviour)

local Move_Duration = 0.3

local LayoutMap =
{
    [1] = {1,4,9},
    [2] = {2,5,8},
    [3] = {3,6,7},
    [4] = {1,4,9},
    [5] = {2,5,8},
    [6] = {3,6,7},
    [7] = {1,4,9},
    [8] = {2,5,8},
    [9] = {3,6,7},
}

---@param context WorldContext
---@param areaObject UnityEngine.GameObject
function BattleLayout:Ctor(context, areaObject)
    self.context = context
    self.areaPointObj = areaObject
    self.checkPointData = self.context.currSubScene.checkPointData
    self.gridLayoutMap = {}

    self.gridLayoutMap[Camp.Atk] = self:CreateLayoutGrids(self.areaPointObj, Camp.Atk)
    self.gridLayoutMap[Camp.Def] = self:CreateLayoutGrids(self.areaPointObj, Camp.Def)
end

--创建布局格子
---@param areaPointObj UnityEngine.GameObject
---@param camp Camp
---@return table<number, Game.Modules.Battle.View.LayoutGrid>
function BattleLayout:CreateLayoutGrids(areaPointObj, camp)
    local forward = areaPointObj.transform.forward
    local dir = camp == Camp.Atk and -forward or forward
    local bornForward = camp == Camp.Atk and forward or -forward --出生朝向
    local firstPos = areaPointObj.transform.position + dir * self.checkPointData.layoutDistance / 2 --首格
    local gridPoints = GridUtils.GetNineGridPoints(firstPos, bornForward, areaPointObj.transform.right, self.checkPointData.layoutGridSize)--获取九宫格位置
    local layoutGrids = BattleUtils.CreateLayoutGrids(gridPoints, bornForward, self.context)
    return layoutGrids
end

--交换
---@param src Game.Modules.Battle.View.LayoutGrid
---@param dst Game.Modules.Battle.View.LayoutGrid
function BattleLayout:Exchange(src, dst)
    local tempOwner = src.owner
    local sequence = self:CreateSequence()
    sequence:Join(src.owner.transform:DOMove(dst.transform.position, Move_Duration))
    sequence:Join(dst.owner.transform:DOMove(src.transform.position, Move_Duration))
    sequence:AppendCallback(function()
        src:SetOwner(dst.owner)
        dst:SetOwner(tempOwner)
    end)
end

--移动
---@param src Game.Modules.Battle.View.LayoutGrid
---@param dst Game.Modules.Battle.View.LayoutGrid
function BattleLayout:Move(src, dst)
    local sequence = self:CreateSequence()
    sequence:Append(src.owner.transform:DOMove(dst.transform.position, Move_Duration))
    sequence:AppendCallback(function()
        local tempOwner = src.owner
        src:ClearOwner()
        dst:SetOwner(tempOwner)
    end)
end

---@param owner Game.Modules.World.Items.Avatar
---@return Game.Modules.Battle.View.LayoutGrid
function BattleLayout:GetLayoutGridByOwner(owner)
    local layoutGrids = self.gridLayoutMap[owner.avatarVo.camp]
    for i = 1, #layoutGrids do
        local grid = layoutGrids[i]
        if grid.owner and grid.owner == owner then
            return layoutGrids[i]
        end
    end
    return nil
end

---@param ownerObj UnityEngine.GameObject
---@return Game.Modules.Battle.View.LayoutGrid
function BattleLayout:GetLayoutGridByOwnerObj(ownerObj)
    for _, layoutGrids in pairs(self.gridLayoutMap) do
        for i = 1, #layoutGrids do
            local grid = layoutGrids[i]
            if grid.owner and grid.owner.gameObject == ownerObj then
                return layoutGrids[i]
            end
        end
    end
    return nil
end

---@param camp Camp
---@return Game.Modules.Battle.View.LayoutGrid
function BattleLayout:GetGridByIndex(camp, index)
    local layoutGrids = self.gridLayoutMap[camp]
    return layoutGrids[index]
end

---@param camp Camp
---@return Game.Modules.Battle.View.LayoutGrid
function BattleLayout:GetGridByLine(camp, index)
    local layoutGrids = self.gridLayoutMap[camp]
    local indexs = LayoutMap[index]
    for i = 1, #indexs do
        if layoutGrids[indexs[i]].owner ~= nil then
            return layoutGrids[indexs[i]]
        end
    end
    return nil
end

---@param camp Camp
---@return Game.Modules.Battle.View.LayoutGrid
function BattleLayout:GetFirstGrid(camp)
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #layoutGrids do
        if layoutGrids[i].owner ~= nil then
            return layoutGrids[i]
        end
    end
    return nil
end

---@param camp Camp
---@return Game.Modules.Battle.View.LayoutGrid
function BattleLayout:GetFirstEmptyGrid(camp)
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #layoutGrids do
        if layoutGrids[i].owner == nil then
            return layoutGrids[i]
        end
    end
    return nil
end

---@param gridObj UnityEngine.GameObject
---@param camp Camp
---@return Game.Modules.Battle.View.LayoutGrid
function BattleLayout:GetLayoutGrid(gridObj, camp)
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #layoutGrids do
        if layoutGrids[i].gameObject == gridObj then
            return layoutGrids[i]
        end
    end
    return nil
end

---@param camp Camp
---@param visible boolean
function BattleLayout:SetGridVisible(camp, visible)
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #layoutGrids do
        if visible then
            layoutGrids[i]:SetGridVisible(visible)
        else
            layoutGrids[i]:SetGridVisible(layoutGrids[i].owner == nil)
        end
    end
    return nil
end

---@param camp Camp
---@param except Game.Modules.Battle.View.LayoutGrid
function BattleLayout:OtherGridShine(camp, except)
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #layoutGrids do
        if layoutGrids[i] ~= except then
            layoutGrids[i]:Shine()
        end
    end
end

--获取非空格子数量
---@param camp Camp
---@return number
function BattleLayout:GetOwnerGridNum(camp)
    local layoutGrids = self.gridLayoutMap[camp]
    local count = 0
    for i = 1, #layoutGrids do
        local grid = layoutGrids[i]
        if grid.owner ~= nil then
            count = count + 1
        end
    end
    return count
end

---@param camp Camp
---@param selectGrids table<number, number>
function BattleLayout:GetTargetList(camp, selectGrids)
    local targetList = {}
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #selectGrids do
        if layoutGrids[selectGrids[i]].owner then
            table.insert(targetList, layoutGrids[selectGrids[i]].owner)
        end
    end
    return targetList
end

---@param camp Camp
---@param selectGrids table<number, number>
---@param select boolean
function BattleLayout:SetAttackSelect(camp, selectGrids, select)
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #selectGrids do
        if layoutGrids[selectGrids[i]].owner ~= nil then
            layoutGrids[selectGrids[i]]:SetAttackSelect(select)
        end
    end
    return nil
end

---@param camp Camp
function BattleLayout:ResetAllGrid(camp)
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #layoutGrids do
        layoutGrids[i]:Reset()
    end
end

---@param camp Camp
---@param visible boolean
function BattleLayout:SetAllGridVisible(camp, visible)
    local layoutGrids = self.gridLayoutMap[camp]
    for i = 1, #layoutGrids do
        layoutGrids[i]:SetVisible(visible)
    end
end

-- 获取前方一排距离
---@param num number
---@param gap number
---@param camp Camp
---@param distance number
---@return table<number, UnityEngine.Vector3>
function BattleLayout:GetForwardPos(camp,num,gap,distance)
    local symbol = camp == Camp.Atk and 1 or -1
    local dir = self.areaPointObj.transform.right * symbol
    local forward = self.areaPointObj.transform.forward * symbol
    local width = num * gap
    local leftPos = self.areaPointObj.transform.position + -dir * (width / 2)
    local points = {}
    for i = 1, num do
        local pos = leftPos + dir * (i - 1) * gap + forward * distance
        table.insert(points, pos)
    end
    return points
end

return BattleLayout