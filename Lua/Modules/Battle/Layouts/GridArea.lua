---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2020/2/21 10:47
--- 网格区域
---


--刷怪区域数据
---@class GridAreaInfo : AreaBaseInfo
---@field type string 类型 boss , normal
---@field waves table<number,GridWaveInfo>
---@field pos number        区域中心点
---动态数据
---@field index number

local BattleItemEvents = require("Game.Modules.Battle.Events.BattleItemEvents")
local BattleEvent = require("Game.Modules.Battle.Events.BattleEvents")
local GridWave = require("Game.Modules.Battle.Layouts.GridWave")
local AreaBase = require("Game.Modules.Battle.Layouts.AreaBase")

---@class Game.Modules.Battle.Layouts.GridArea : Game.Modules.Battle.Layouts.AreaBase
---@field New fun(areaInfo:GridAreaInfo, checkPointData:CheckPointData):Game.Modules.Battle.Layouts.GridArea
---@field areaInfo GridAreaInfo
---@field checkPointData CheckPointData
---@field waves table<number, Game.Modules.Battle.Layouts.GridWave>
---@field orgBornPoints table<number, UnityEngine.Vector3> --原始出生位置
---@field currWave Game.Modules.Battle.Layouts.GridWave
---@field areaPointObj UnityEngine.GameObject
local GridArea = class("Game.Modules.Battle.Layouts.GridArea", AreaBase)

---@param areaInfo GridAreaInfo
---@param checkPointData CheckPointData
function GridArea:Ctor(areaInfo, checkPointData)
    GridArea.super.Ctor(self)
    self.areaInfo = areaInfo
    self.checkPointData = checkPointData
    self.waves = {}
end

--初始化该区域
function GridArea:InitArea()
    for i = 1, #self.areaInfo.waves do
        local wave = GridWave.New(self.areaInfo.waves[i])
        wave.context = self.context
        self.waves[i] = wave
    end
    self.layoutGrids = self.context.battleLayout.gridLayoutMap[Camp.Def]
end

function GridArea:Refresh()
    if self.isActive then
        return --重复激活
    end
    AddEventListener(BattleItemEvents, BattleItemEvents.BattleItemDead, self.OnBattleItemDead, self)
    self:_debug(("GridArea Ready to Refresh AreaId:" .. self.areaInfo.areaIndex))
    for i = 1, #self.waves do
        local wave = self.waves[i]
        wave:Refresh()
    end
    self.isBornOver = true
end

---@param callback Handler
function GridArea:OnAreaEnter(callback)
    if not StringUtil.IsEmpty(self.areaInfo.enterScript) then
        Plot.PlayScript(self.areaInfo.enterScript,callback)
    else
        callback:Execute()
    end
end

---@param callback Handler
function GridArea:OnAreaExit(callback)
    if not StringUtil.IsEmpty(self.areaInfo.exitScript) then
        Plot.PlayScript(self.areaInfo.exitScript,callback)
    else
        callback:Execute()
    end
end

--是否都已经死亡
function GridArea:IsAllDead()
    if not self.isRefreshOver then
        return false
    end
    local monsters = self:GetAllMonster()
    local allDead = true
    for i = 1, monsters:Size() do
        if not monsters[i].deadOver then
            allDead = false
            break;
        end
    end
    return allDead
end

--是否都已经死亡并且死亡动作也播放完毕
---@return boolean
function GridArea:IsAllDeadOver()
    if not self.isRefreshOver then
        return false
    end
    local monsters = self:GetAllMonster()
    local allDead = true
    for i = 1, monsters:Size() do
        if not monsters[i].deadOver then
            allDead = false
            break;
        end
    end
    return allDead
end


--是否都已经死亡并且死亡动作也播放完毕
---@return List | table<number, Game.Modules.World.Items.BattleUnit>
function GridArea:GetAllMonster()
    local monsters = List.New()
    for i = 1, #self.waves do
        local wave = self.waves[i]
        for j = 1, wave.itemList:Size() do
            monsters:Add(wave.itemList[j])
        end
    end
    return monsters
end

---@return List | table<number, WavePointInfo>
function GridArea:GetAllWavePointInfo()
    local wavePointInfos = List.New()
    for i = 1, #self.areaInfo.waves do
        local wave = self.areaInfo.waves[i]
        for j = 1, #wave.wavePoints do
            wavePointInfos:Push(wave.wavePoints[j])
        end
    end
    return wavePointInfos
end

---@param event Game.Modules.World.Events.BattleItemEvents
function GridArea:OnBattleItemDead(event)
    if event and event.target then
        --local grid = self.context.battleLayout:GetLayoutGridByOwner(event.target)
        --grid:ClearOwner()
    end
end

function GridArea:Clear()
    RemoveEventListener(BattleItemEvents, BattleItemEvents.BattleItemDead, self.OnBattleItemDead, self)
end

return GridArea