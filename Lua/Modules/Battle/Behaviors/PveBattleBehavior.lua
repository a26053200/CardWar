---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2020/6/25 23:53
---


local BattleEvents = require("Game.Modules.Battle.Events.BattleEvents")
local BattleItemEvents = require("Game.Modules.Battle.Events.BattleItemEvents")
local GridArea = require("Game.Modules.Battle.Layouts.GridArea")
local BattleBehavior = require("Game.Modules.Battle.Behaviors.BattleBehavior")
local PoolProxy = require("Game.Modules.Common.Pools.AssetPoolProxy")
local RoundBehavior = require("Game.Modules.Battle.Behaviors.RoundBehavior")

---@class Game.Modules.Battle.Behaviors.PveBattleBehavior : Game.Modules.Battle.Behaviors.BattleBehavior
---@field New fun(checkPointData:CheckPointData, cardList : table, context:WorldContext):Game.Modules.Battle.Behaviors.BattleBehavior
---@field roundBehavior Game.Modules.Battle.Behaviors.RoundBehavior
---@field areas table<number,Game.Modules.Battle.Layouts.GridArea>  刷新区域数据
---@field areaQueue List | table<number, Game.Modules.Battle.Layouts.GridArea>  刷新区域数据 刷新区域队列
---@field lastArea Game.Modules.Battle.Layouts.GridArea 上一区域
---@field cardList List | table<number, Game.Modules.Card.Vo.CardVo> 上阵的卡牌
---@field atkUnitList List | table<number, Game.Modules.World.Items.BattleUnit> 上阵的卡牌
---@field transitionCtrl Game.Modules.Transition.Controller.TransitionController
local PveBattleBehavior = class("Game.Modules.Battle.Behaviors.PveBattleBehavior",BattleBehavior)

---@param checkPointData CheckPointData
---@param context WorldContext
function PveBattleBehavior:Ctor(checkPointData, cardList, context)
    PveBattleBehavior.super.Ctor(self, checkPointData, context)
    self.checkPointData = checkPointData
    self.cardList = cardList
    self.areas = {}

    AddEventListener(BattleItemEvents, BattleItemEvents.BattleItemDead, self.OnBattleItemDead, self)
end

--初始化对象池
function PveBattleBehavior:InitObjectPool()
    local poolObj = self.context.currSubScene:CreateGameObject("[Pool" .. self.context.id .. "]")
    self.context.pool = PoolProxy.New(poolObj)
    local battleUnitList = List.New() ---@type List | table<number,number> avatarName
    if self.checkPointData.areas then
        for i = 1, #self.checkPointData.areas do
            local areaInfo =  self.checkPointData.areas[i]
            for j = 1, #areaInfo.waves do
                local waveInfo = areaInfo.waves[j]
                for k = 1, #waveInfo.wavePoints do
                    local pointInfo = waveInfo.wavePoints[k]
                    if not battleUnitList:Contain(pointInfo.battleUnit) then
                        battleUnitList:Add(pointInfo.battleUnit)
                    end
                end
            end
        end
    end

    for i = 1, self.cardList:Size() do
        local battleUnit = self.cardList[i].cardInfo.battleUnit
        if not battleUnitList:Contain(battleUnit) then
            battleUnitList:Add(battleUnit)
        end
    end
    local poolsInfos = PoolFactory.CalcPoolInfoMap(battleUnitList)
    table.insert(poolsInfos,{prefabUrl = Prefabs.LayoutGrid, initNum = 18})
    self.context.pool:InitObjectPool(poolsInfos)
end

function PveBattleBehavior:CreateBattle()
    --初始化区域
    for i = 1, #self.checkPointData.areas do
        local areaInfo =  self.checkPointData.areas[i] ---@type GridAreaInfo
        areaInfo.index = i
        local area = GridArea.New(areaInfo, self.checkPointData)
        area.context = self.context
        area:InitArea()
        table.insert(self.areas, area)
    end
    self:NewQueue()
    self:GetCurrArea():Refresh()

    --上阵玩家英雄
    self.atkUnitList = List.New()
    for i = 1, self.cardList:Size() do
        local battleUnitName = self.cardList[i].cardInfo.battleUnit
        local battleItem = self.context:AddBattleUnit(Camp.Atk, battleUnitName)
        self.atkUnitList:Add(battleItem)
    end
end

function PveBattleBehavior:StartBattle()
    self.roundBehavior = RoundBehavior.New(self.context)
    self.roundBehavior:SetRoundMode(RoundMode.Auto)
    self.roundBehavior:Play()
end

--新的队列
function PveBattleBehavior:NewQueue()
    local list = {}
    for i = 1, #self.areas do
        table.insert(list, self.areas[i])
    end
    self.areaQueue = List.New(list)
end

function PveBattleBehavior:NextArea()
    self.areaQueue:Shift()
end

--获取当前波怪物数据
---@return Game.Modules.Battle.Layouts.GridArea
function PveBattleBehavior:GetCurrArea()
    --if self.currBossArea and self.currBossArea.isActive then
    --    return self.currBossArea
    --else
    return self.areaQueue:Peek()
    --end
end

---@param event Game.Modules.World.Events.BattleItemEvents
function PveBattleBehavior:OnBattleItemDead(event)
    if self.isAllDead then --任何一方全部死亡
        return
    end
    local unitList = nil
    if event.target.battleUnitVo.battleUnitInfo.type == BattleUnitType.Hero then
        unitList = self.atkUnitList
    else
        unitList = self:GetCurrArea():GetAllMonster()
    end
    if self:IsAllDead(unitList) then
        self.isAllDead = true
        if event.target.battleUnitVo.battleUnitInfo.type == BattleUnitType.Hero then
            self:OnAtkerAllDead()
        else
            self:OnCurrAreaAllDead()
        end
    end
end

--所有怪物死亡
function PveBattleBehavior:OnCurrAreaAllDead()
    self.lastArea = self:GetCurrArea()
    self:_debug("当前区域所有怪物死亡 areaId:" .. self.lastArea.areaInfo.areaIndex)
    self:NextArea()
    local currArea = self:GetCurrArea()
    if currArea then
        self:_debug("下一个区域 areaId:" .. currArea.areaInfo.areaIndex)
        currArea:Refresh()
        self.roundBehavior:StopRound()
        transition:DoTransition(function()
            currArea:Active()
            self.roundBehavior:Play()
            self.isAllDead = false
        end)
    else --没有下个区域,战斗结束
        --等待所有目标的死亡动画都播放完毕
        self:_debug("没有下个区域，战斗结束")
        if self.lastArea:IsAllDead() then
            self:StartCoroutine(function ()
                while not self.lastArea:IsAllDeadOver() do
                    coroutine.step(1)
                end
                self.lastArea:OnAreaExit(Handler.Get(self.OnCurrAreaAllDeadOver, self))
            end)
        end
    end
end

--所有怪物死亡结束
function PveBattleBehavior:OnCurrAreaAllDeadOver()
    if self.lastArea then
        self:_debug("清除上一区域怪 areaId:" .. self.lastArea.areaInfo.areaIndex)
        self.lastArea:Clear()
        self:_debug("当前区域所有怪物死亡结束 areaId:" .. self.lastArea.areaInfo.areaIndex)
        BattleEvents.Dispatch(BattleEvents.AllMonsterDeadOver)
    end
end

--所有英雄都死亡结束
function PveBattleBehavior:OnAtkerAllDead()
    self:StartCoroutine(function ()
        self:_debug("所有英雄都已经死亡:")
        self.roundBehavior:StopRound()
        while not self:IsAllDeadOver(self.atkUnitList) do
            coroutine.step(1)
        end
        self:OnAtkerAllDeadOver()
    end)
end

--死亡
---@param unitList List | table<number, Game.Modules.World.Items.BattleUnit>
function PveBattleBehavior:IsAllDead(unitList)
    local allDead = true
    for i = 1, unitList:Size() do
        if not unitList[i]:IsDead() then
            allDead = false
            break;
        end
    end
    return allDead
end

--死亡
---@param unitList List | table<number, Game.Modules.World.Items.BattleUnit>
function PveBattleBehavior:IsAllDeadOver(unitList)
    local allDeadOver = true
    for i = 1, unitList:Size() do
        if not unitList[i].deadOver then
            allDeadOver = false
            break;
        end
    end
    return allDeadOver
end

function PveBattleBehavior:OnAtkerAllDeadOver()
    if self.roundBehavior then
        self.roundBehavior:Dispose()
        self.roundBehavior = nil
    end
end

function PveBattleBehavior:Dispose()
    PveBattleBehavior.super.Dispose(self)
    self:Clear()

    if self.roundBehavior then
        self.roundBehavior:Dispose()
        self.roundBehavior = nil
    end

    RemoveEventListener(BattleItemEvents, BattleItemEvents.BattleItemDead, self.OnBattleItemDead, self)
end

return PveBattleBehavior