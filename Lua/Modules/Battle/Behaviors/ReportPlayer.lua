---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2020/7/5 16:19
--- 战报播放器
---

local AttackRound = require("Game.Modules.Battle.Report.AttackRound")
local BattleRecord = require("Game.Modules.Battle.Report.BattleRecord")
local BattleEvent = require("Game.Modules.Battle.Events.BattleEvents")
local BaseBehavior = require("Game.Modules.Common.Behavior.BaseBehavior")

---@class Game.Modules.Battle.Behaviors.ReportPlayer : Game.Modules.Common.Behavior.BaseBehavior
---@field New fun(context:WorldContext):Game.Modules.Battle.Behaviors.ReportPlayer
---@field currArea Game.Modules.Battle.Layouts.GridArea
---@field context WorldContext
---@field reportContext Game.Modules.Battle.Report.ReportContext
---@field currBattleUnit Game.Modules.World.Items.Avatar 当前回合的Avatar
---@field totalAttackNum number
---@field isRoundOver boolean
---@field isPause boolean
---@field attackSortList List | table<number, Game.Modules.World.Items.Avatar>
---@field attackRoundOver boolean
---@field mode RoundMode
---@field manualCamp Camp 手动模式攻击的阵营
---@field manualLayoutIndex number 手动模式攻击索引
---@field manualSkillName string 手动模式使用的技能
---@field attackRoundQueue table<number, Game.Modules.Battle.Report.AttackRound>
local ReportPlayer = class("Module.Battle.Behaviors.ReportPlayer",BaseBehavior)

---@param context WorldContext
---@param reportContext Game.Modules.Battle.Report.ReportContext
function ReportPlayer:Ctor(context, reportContext)
    ReportPlayer.super.Ctor(self)

    self:AppendBehavior(self:RoundStart(),      "ReportPlayer RoundStart")
    self:AppendBehavior(self:RoundProgress(),   "ReportPlayer RoundProgress")
    self:AppendBehavior(self:RoundEnd(),        "ReportPlayer RoundEnd")

    self.context = context
    self.reportContext = reportContext

    AddEventListener(BattleEvent, BattleEvent.ExitAttack, self.OnExitAttack, self)
    --AddEventListener(BattleEvent, BattleEvent.BattlePause, self.OnBattlePause, self)
    self.isRoundOver = true
end

function ReportPlayer:BeginReport()
    self.attackRoundQueue = List.New()
    for i = 1, #self.context.reportVo.reportNodes do
        local node = self.context.reportVo.reportNodes[i]
        local attackRound = AttackRound.New()
        attackRound.camp = node.camp
        attackRound.layoutIndex = node.layoutIndex
        attackRound.actionRecoveryTP = node.actionRecoveryTP
        attackRound.skill = SkillVoPool:Get()
        attackRound.skill:Init(SkillConfig.Get(node.skillId))
        attackRound.skill.level = node.level
        self.attackRoundQueue:Push(attackRound)
    end
end

---@return Game.Modules.Battle.Report.AttackRound
function ReportPlayer:ShiftReport()
    return self.attackRoundQueue:Shift()
end

function ReportPlayer:Play()
    ReportPlayer.super.Play(self)
    if self.context.isReplaying then
        self:BeginReport()
    else
        self.record = BattleRecord.New(self.reportContext)
    end
end

function ReportPlayer:OnExitAttack()
    self.attackRoundOver = true
end
--暂停回合
function ReportPlayer:Pause()
    self.isPause = true
end

--恢复
function ReportPlayer:Resume()
    self.isPause = false
end

--回合开始阶段
--排序整个回合的攻击队列
function ReportPlayer:RoundStart()
    local behavior = self:CreateSubBehavior()
    behavior:AppendState(function()
        --self:_debug("ReportPlayer RoundStart")
        self:StartCoroutine(function()
            while self.isPause do
                coroutine.step(1)
            end
            while self.reportContext.reportBehavior.currAttackRound == nil do
                coroutine.step()
                --print("wait Attack round ready")
            end
            self:NextState()
        end)
    end)
    return behavior
end

---@return Game.Modules.Battle.Report.AttackRound
function ReportPlayer:GetAttackRound()
    local attackRound = nil
    if self.context.isReplaying then
        --播放战报
        attackRound = self:ShiftReport()
        attackRound:SetBattleUnit(self.context:GetBattleUnit(attackRound.camp, attackRound.layoutIndex))
    else
        --录制战报
        attackRound = self.reportContext.reportBehavior.currAttackRound
        self.record:Push(attackRound)
    end
    return attackRound
end

--按队列进行攻击
function ReportPlayer:RoundProgress()
    local behavior = self:CreateSubBehavior()
    behavior:AppendState(function()
        self:StartCoroutine(function()
            --self:_debug("ReportPlayer RoundProgress ")
            --等待暂停
            while self.isPause do
                coroutine.step(1)
            end
            local attackRound = self:GetAttackRound()
            local reportUnit = attackRound.battleUnit
            local battleUnit = self.context:GetBattleUnit(reportUnit.battleUnitVo.camp, reportUnit.battleUnitVo.layoutIndex)
            if battleUnit and not battleUnit:IsDead() then
                battleUnit.behavior:Play(attackRound)
                self.attackRoundOver = false
                while not self.attackRoundOver do
                    coroutine.step(1)
                end
                self.currBattleUnit = battleUnit
            end
            --self:_debug("RoundBehavior Round Attack Over")
            self:NextState()
        end)
    end)
    return behavior
end

--回合结束阶段
function ReportPlayer:RoundEnd()
    local behavior = self:CreateSubBehavior()
    behavior:AppendState(function()
        --self:_debug("ReportPlayer RoundEnd")
        self:NextState()
    end)
    return behavior
end

function ReportPlayer:StopRound()
    self:Stop()
end

function ReportPlayer:Stop()
    ReportPlayer.super.Stop(self)
    --剩下的单位都停止行为
    local tempList = List.New()
    tempList:Concat(self.context.battleBehavior:GetCampAvatarList(Camp.Atk))
    tempList:Concat(self.context.battleBehavior:GetCampAvatarList(Camp.Def))
    for i = 1, tempList:Size() do
        if not tempList[i]:IsDead() then
            tempList[i]:SetBehaviorEnabled(false)
        end
    end
end

function ReportPlayer:Dispose()
    ReportPlayer.super.Dispose(self)
    RemoveEventListener(BattleEvent, BattleEvent.ExitAttack, self.OnExitAttack, self)
    --RemoveEventListener(BattleEvent, BattleEvent.BattlePause, self.OnBattlePause, self)
end
--调试
function ReportPlayer:_debug(msg)
    if self.gameObject then
        print(string.format("<color=#FFFF00FF>[%s][%s]</color>\n<color=#FF00FFFF>%s</color>",self.debugName,self.stateMachine.id,msg))
    else
        print(string.format("<color=#FFFF00FF>[%s][%s]</color>\n<color=#FF00FFFF>%s</color>",self.__classname,self.stateMachine.id,msg))
    end
end

return ReportPlayer