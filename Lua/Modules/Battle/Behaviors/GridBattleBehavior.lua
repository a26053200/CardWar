---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2020/2/21 10:45
--- 九宫格布局
---

local GridBattleEvents = require("Module.Battle.Events.GridBattleEvents")
local SceneItemEvents = require("Module.World.Events.SceneItemEvents")
local GridArea = require("Module.Battle.Layouts.GridArea")
local BattleBehavior = require("Module.World.Behaviors.BattleBehavior")

---@class Module.Battle.Behaviors.GridBattleBehavior : Module.World.Behaviors.BattleBehavior
---@field New fun(checkPointData:CheckPointData, context:WorldContext):Module.World.Behaviors.BattleBehavior
---@field areas table<number,Module.Battle.Layouts.GridArea>  刷新区域数据
---@field areaQueue List | table<number, Module.Battle.Layouts.GridArea>  刷新区域数据 刷新区域队列
---@field lastArea Module.Battle.Layouts.GridArea 上一区域
local GridBattleBehavior = class("Module.Battle.Behaviors.GridBattleBehavior",BattleBehavior)

---@param checkPointData CheckPointData
---@param context WorldContext
function GridBattleBehavior:Ctor(checkPointData, context)
    GridBattleBehavior.super.Ctor(self, checkPointData, context)
    self.checkPointData = checkPointData
    self.areas = {}

    AddEventListener(SceneItemEvents, SceneItemEvents.MonsterDead, self.OnMonsterDead, self)
end

function GridBattleBehavior:CreateBattle()
    for i = 1, #self.checkPointData.areas do
        local areaInfo =  self.checkPointData.areas[i] ---@type GridAreaInfo
        areaInfo.index = i
        if areaInfo.type == AreaType.Normal or
                areaInfo.type == AreaType.Boss then
            local area = GridArea.New(areaInfo, self.checkPointData)
            area.context = self.context
            area:InitArea(self.context.layoutObjects[areaInfo.pos])
            table.insert(self.areas, area)
        end
    end
    self:NewQueue()
    self:GetCurrArea():Refresh()
end

--新的队列
function GridBattleBehavior:NewQueue()
    local list = {}
    for i = 1, #self.areas do
        table.insert(list, self.areas[i])
    end
    self.areaQueue = List.New(list)
end

function GridBattleBehavior:NextArea()
    self.areaQueue:Shift()
end

--获取当前波怪物数据
---@return Module.Battle.Layouts.GridArea
function GridBattleBehavior:GetCurrArea()
    --if self.currBossArea and self.currBossArea.isActive then
    --    return self.currBossArea
    --else
    return self.areaQueue:Peek()
    --end
end

function GridBattleBehavior:OnMonsterDead(event)
    if self.isAllDead then
        return
    end
    if self:GetCurrArea():IsAllDead() then
        self.isAllDead = true
        GridBattleEvents.Dispatch(GridBattleEvents.AllMonsterDead)
        self:OnCurrAreaAllDead()
        --print("OnTargetDead IsAllDead true - " .. self:GetCurrArea():GetAliveNum())
    else
        --print("OnTargetDead IsAllDead false - " .. self:GetCurrArea():GetAliveNum())
    end
end

--所有怪物死亡
function GridBattleBehavior:OnCurrAreaAllDead()
    self.lastArea = self:GetCurrArea()
    self:_debug("当前区域所有怪物死亡 areaId:" .. self.lastArea.areaInfo.areaId)
    self:NextArea()
    if self:GetCurrArea() then
        self:_debug("下一个区域 areaId:" .. self:GetCurrArea().areaInfo.areaId)
        self:GetCurrArea():Refresh()
    else --没有下个区域,战斗结束
        --等待所有目标的死亡动画都播放完毕
        self:_debug("没有下个区域，战斗结束")
        if self.lastArea:IsAllDead() then
            self:StartCoroutine(function ()
                while not self.lastArea:IsAllDeadOver() do
                    coroutine.step(1)
                end
                self.lastArea:OnAreaExit(Handler.Get(self.OnCurrAreaAllDeadOver, self))
            end)
        end
    end
end

--所有怪物死亡结束
function GridBattleBehavior:OnCurrAreaAllDeadOver()
    if self.lastArea then
        self:_debug("清除上一区域怪 areaId:" .. self.lastArea.areaInfo.areaId)
        self.lastArea:Clear()
        self:_debug("当前区域所有怪物死亡结束 areaId:" .. self.lastArea.areaInfo.areaId)
        GridBattleEvents.Dispatch(GridBattleEvents.AllMonsterDeadOver)
    end
end


function GridBattleBehavior:Dispose()
    GridBattleBehavior.super.Dispose(self)
    self:Clear()
    RemoveEventListener(SceneItemEvents, SceneItemEvents.MonsterDead, self.OnMonsterDead, self)
end

return GridBattleBehavior