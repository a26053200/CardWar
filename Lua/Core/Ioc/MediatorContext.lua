---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhengnan.
--- DateTime: 2018/6/12 10:37
---

local IocContext = require("Core.Ioc.IocContext")
local MediatorContext = class("MediatorContext",IocContext)

function MediatorContext:Ctor(binder)
    self.binder = binder
end

function MediatorContext:GetMediator(viewName)
    local mdrClass = self.binder.typeDict[viewName]
    if mdrClass == nil then
        logError("View:{0} mediator has not register",viewName)
    end
    return mdrClass
end

function MediatorContext:Launch()
    --TODO
	self.binder:Bind(require("Module.AdventureEvent.View.AdventureEventEndAccountViewMdr")):To(ViewConfig.AdventureEventEndAccountView.name)
	self.binder:Bind(require("Module.AdventureEvent.View.AdventureEventEndProposalViewMdr")):To(ViewConfig.AdventureEventEndProposalView.name)
	self.binder:Bind(require("Module.AdventureEvent.View.AdventureEventViewMdr")):To(ViewConfig.AdventureEventView.name)
	self.binder:Bind(require("Module.AdventureEvent.View.ReadyAdventureChooseViewMdr")):To(ViewConfig.ReadyAdventureChooseView.name)
	self.binder:Bind(require("Module.AdventureEvent.View.ReadyAdventureViewMdr")):To(ViewConfig.ReadyAdventureView.name)
	self.binder:Bind(require("Module.ArrangeHero.View.ArrangeHeroMdr")):To(ViewConfig.ArrangeHero.name)
	self.binder:Bind(require("Module.Awake.View.AwakeMdr")):To(ViewConfig.Awake.name)
	self.binder:Bind(require("Module.Battle.View.BattleArrayEditorMdr")):To(ViewConfig.BattleArrayEditor.name)
	self.binder:Bind(require("Module.Battle.View.BattleConsoleMdr")):To(ViewConfig.BattleConsole.name)
	self.binder:Bind(require("Module.Battle.View.BattleGridMdr")):To(ViewConfig.BattleGrid.name)
	self.binder:Bind(require("Module.Battle.View.BattleHeroListMdr")):To(ViewConfig.BattleHeroList.name)
	self.binder:Bind(require("Module.Battle.View.BattleIdleMdr")):To(ViewConfig.BattleIdle.name)
	self.binder:Bind(require("Module.Battle.View.BattleLayoutMdr")):To(ViewConfig.BattleLayout.name)
	self.binder:Bind(require("Module.BattleRstTest.View.BattleRstTestMdr")):To(ViewConfig.BattleRstTest.name)
	self.binder:Bind(require("Module.BossChallenge.View.BossChallengeMdr")):To(ViewConfig.BossChallenge.name)
	self.binder:Bind(require("Module.BossInfo.View.BossInfoMdr")):To(ViewConfig.BossInfo.name)
	self.binder:Bind(require("Module.BossProgress.View.BossProgressMdr")):To(ViewConfig.BossProgress.name)
	self.binder:Bind(require("Module.BossRstRank.View.BossRstRankMdr")):To(ViewConfig.BossRstRank.name)
	self.binder:Bind(require("Module.Bottom.View.BottomUIMdr")):To(ViewConfig.BottomUI.name)
	self.binder:Bind(require("Module.Bottom.View.NavigationMdr")):To(ViewConfig.Navigation.name)
	self.binder:Bind(require("Module.Chapter.View.ChapterChooseViewMdr")):To(ViewConfig.ChapterChooseView.name)
	self.binder:Bind(require("Module.Chapter.View.ChapterMdr")):To(ViewConfig.Chapter.name)
	self.binder:Bind(require("Module.Chapter.View.PointUIMdr")):To(ViewConfig.PointUI.name)
	self.binder:Bind(require("Module.CheckPoint.View.CheckPointSelectMdr")):To(ViewConfig.CheckPointSelect.name)
	self.binder:Bind(require("Module.Debug.View.DebugBarMdr")):To(ViewConfig.DebugBar.name)
	self.binder:Bind(require("Module.Idle.View.IdleEventMdr")):To(ViewConfig.IdleEvent.name)
	self.binder:Bind(require("Module.Idle.View.IdleInfoMdr")):To(ViewConfig.IdleInfo.name)
	self.binder:Bind(require("Module.Idle.View.IdleListMdr")):To(ViewConfig.IdleList.name)
	self.binder:Bind(require("Module.Item.View.BagMdr")):To(ViewConfig.Bag.name)
	self.binder:Bind(require("Module.Loading.View.LoadingMdr")):To(ViewConfig.Loading.name)
	self.binder:Bind(require("Module.Login.View.LoginMdr")):To(ViewConfig.Login.name)
	self.binder:Bind(require("Module.Login.View.ServerListMdr")):To(ViewConfig.ServerList.name)
	self.binder:Bind(require("Module.MiniScene.View.MiniSceneMdr")):To(ViewConfig.MiniScene.name)
	self.binder:Bind(require("Module.Mood.View.MoodMdr")):To(ViewConfig.Mood.name)
	self.binder:Bind(require("Module.Plot.View.PlotMdr")):To(ViewConfig.Plot.name)
	self.binder:Bind(require("Module.Transition.View.TransitionMdr")):To(ViewConfig.Transition.name)
	self.binder:Bind(require("Module.World.View.BattleSceneMdr")):To(ViewConfig.BattleScene.name)
	self.binder:Bind(require("Module.World.View.WorldMdr")):To(ViewConfig.World.name)
	self.binder:Bind(require("Module.World.View.WorldSceneMdr")):To(ViewConfig.WorldScene.name)
    --TODO
end

return MediatorContext
